// autogenerated using shadowcookie's RszTool: https://github.com/kagenocookie/RszTool
#include "EFX_Fixed_structs.bt";

typedef struct EFXBoneNameValuePair_t {
	uint nameHash;
	uint value;
} EFXBoneNameValuePair ;

typedef struct EfxMaterialClip_Struct4_t {
	uint mdfPropertyHash;
	int unkn1;
	int unkn2;
	int unkn3;
} EfxMaterialClip_Struct4 ;

typedef struct SByteSet_t {
	byte b1;
	byte b2;
	byte b3;
	byte b4;
} SByteSet ;

typedef struct FloatWithColor_t {
	float value;
	Color color;
} FloatWithColor ;

typedef struct {
	int magic;
	int ukn;
	int entryCount;
	int stringTableLength;
	int actionCount;
	if (Version >= EfxVersion_RE2) { // end at: fieldParameterCount
		int fieldParameterCount;
	}

	int expressionParameterCount;
	int effectGroupsCount;
	int effectGroupsLength;
	if (Version >= EfxVersion_RE3) { // end at: uknFlag
		int boneCount;
		int boneAttributeEntryCount;
		int uknFlag;
	}

}EfxHeader<read="[EfxHeader]">;

typedef struct {
	if (uvarType == 2) { // end at: path
		int len_path;
		wstring path;
	}

	if (uvarType == 2) { // end at: group
		int len_group;
		wstring group;
	}

}EFXUvarGroup<read="[EFXUvarGroup]">;

typedef struct {
	EfxClipPlaybackType loopType;
	float clipDuration;
	int clipCount;
	int frameCount;
	int interpolationDataCount;
	int clipDataSize;
	int frameDataSize;
	int interpolationDataSize;
	EfxClipList parsedClips;
}EfxClipData<read="[EfxClipData]">;

typedef struct {
	EfxClipPlaybackType loopType;
	float clipDuration;
	int clipCount;
	int frameCount;
	int interpolationDataCount;
	int clipDataSize;
	int frameDataSize;
	int interpolationDataSize;
	if (Version >= EfxVersion_RE4) { // end at: mdfPropertyCount
		int mdfPropertyCount;
	}

	if (Version >= EfxVersion_RE3) { // end at: indicesCount
		int indicesCount;
	}

	EfxClipList parsedClips;
	if (Version >= EfxVersion_RE4 ? mdfPropertyCount : clipCount > 0) EfxMaterialClip_Struct4 mdfProperties[Version >= EfxVersion_RE4 ? mdfPropertyCount : clipCount] <optimize=false>;
	if (Version >= EfxVersion_RE3) { // end at: indices
		if (indicesCount > 0) uint indices[indicesCount] <optimize=false>;
	}

}EfxMaterialClipData<read="[EfxMaterialClipData]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint maxParticles;
	uint rawMaxParticles;
	Int2 spawnNum;
	Int2 intervalFrame;
	if (Version < EfxVersion_DD2) { // end at: useSpawnFrame
		uint useSpawnFrame;
	}

	if (Version >= EfxVersion_DD2) { // end at: useSpawnFrame_toggle
		byte useSpawnFrame_toggle;
	}

	Int2 spawnFrame;
	if (Version > EfxVersion_RE3) { // end at: re4_unkn6
		Int2 loopNum;
		Int2 emitterdelayFrame;
		if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
			byte dd2_toggle1;
			byte dd2_toggle2;
			byte dd2_toggle3;
			float dd2_unknFlt;
			ubyte dd2_unkn2_toggle;
			uint dd2_unkn2;
		}

		uint ringBufferMode;
		if (Version >= EfxVersion_RERT) { // end at: re4_unkn6
			if (Version >= EfxVersion_DD2) { // end at: dd2_unkn3
				Int2 dd2_unkn3;
			}

			if (Version >= EfxVersion_DD2) { // end at: dd2_unkn4
				ubyte dd2_unkn4;
			}

			uint sb_unkn3;
			if (Version >= EfxVersion_RE4) { // end at: re4_unkn6
				if (Version < EfxVersion_DD2) { // end at: re4_unkn4
					uint re4_unkn0;
					float re4_unkn1;
					uint re4_unkn2;
					uint re4_unkn3;
					uint re4_unkn4;
				}

				if (Version >= EfxVersion_DD2) { // end at: dd2_unkn5
					ubyte dd2_unkn5;
				}

				uint re4_unkn5;
				if (Version < EfxVersion_DD2) { // end at: re4_unkn6
					uint re4_unkn6;
				}
			}
		}
	}

	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn_toggle
		ubyte mhws_unkn_toggle;
	}

}Spawn_DMC5<read="[Spawn]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(7);
	ExpressionAssignType spawnNum;
	ExpressionAssignType spawnNumRange;
	ExpressionAssignType intervalFrame;
	ExpressionAssignType intervalFrameRange;
	if (Version >= EfxVersion_RE3) { // end at: emitterDelayFrameRange
		ExpressionAssignType emitterDelayFrame;
		ExpressionAssignType emitterDelayFrameRange;
	}

	if (Version >= EfxVersion_RERT) { // end at: speed
		ExpressionAssignType speed;
	}

	EFXExpressionList expressions;
}SpawnExpression_RE3<read="[SpawnExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	Int3 RelationPos;
	Int3 RelationRot;
	Int3 RelationScl;
	if (Version < EfxVersion_RE8) { // end at: ParticleUseLocal_re7
		uint ParticleUseLocal_re7;
	}

	if (Version >= EfxVersion_RE8) { // end at: unkn8
		ubyte ParticleUseLocal;
		float ConstInheritRate;
		float ConstInheritVariation;
		uint ConstFrame;
		uint ConstFrameVariation;
		uint unkn6;
		uint unkn7;
		float unkn8;
	}

	int len_boneName;
	wstring boneName;
}ParentOptions_RE7<read="[ParentOptions]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(7);
	ExpressionAssignType unkn1_1;
	ExpressionAssignType unkn1_2;
	ExpressionAssignType unkn1_3;
	ExpressionAssignType unkn1_4;
	ExpressionAssignType unkn1_5;
	ExpressionAssignType unkn1_6;
	ExpressionAssignType unkn1_7;
	EFXExpressionList expressions;
}ParentOptionsExpression_DD2<read="[ParentOptionsExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	Int2 AppearFrameRange;
	Int2 KeepFrameRange;
	Int2 VanishFrameRange;
	uint unkn7;
	uint unkn8;
	if (Version >= EfxVersion_RE2) { // end at: unkn9
		uint unkn9;
	}

}Life_RE7<read="[Life]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(6);
	ExpressionAssignType appearLife;
	if (Version >= EfxVersion_DD2 || Version == EfxVersion_RE7) { // end at: appearLifeRand
		ExpressionAssignType appearLifeRand;
	}

	ExpressionAssignType keepLife;
	if (Version >= EfxVersion_DD2 || Version == EfxVersion_RE7) { // end at: keepLifeRand
		ExpressionAssignType keepLifeRand;
	}

	ExpressionAssignType vanishLife;
	if (Version >= EfxVersion_DD2 || Version == EfxVersion_RE7) { // end at: vanishLifeRand
		ExpressionAssignType vanishLifeRand;
	}

	EFXExpressionList expressions;
}LifeExpression_RE7<read="[LifeExpression]">;

typedef struct {
	uint unkn1;
	Color color;
	float unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	UndeterminedFieldType unkn13;
	float unkn14;
	UndeterminedFieldType unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	UndeterminedFieldType unkn21;
	float unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	float unkn26;
	UndeterminedFieldType unkn27;
	float unkn28;
	UndeterminedFieldType unkn29;
	float unkn30;
	UndeterminedFieldType unkn31;
	float unkn32;
	UndeterminedFieldType unkn33;
	uint unkn34;
	uint unkn35;
	UndeterminedFieldType unkn36;
	UndeterminedFieldType unkn37;
	float unkn38;
	float unkn39;
}TextureUnitData<read="[TextureUnitData]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	TextureUnitData texUnit1;
	TextureUnitData texUnit2;
	TextureUnitData texUnit3;
	uint uvs0PathCharCount;
	uint uvs1PathCharCount;
	uint uvs2PathCharCount;
	wstring uvs0Path;
	wstring uvs1Path;
	wstring uvs2Path;
}TextureUnit_DMC5<read="[TextureUnit]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(114);
	ExpressionAssignType assignTypes[114] <optimize=false>;
	EFXExpressionList expressions;
}TextureUnitExpression_DD2<read="[TextureUnitExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1;
	float unkn2;
	float unkn3;
}TextureFilter_RE4<read="[TextureFilter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	UndeterminedFieldType unkn1_6;
	float unkn1_7;
	UndeterminedFieldType unkn1_8;
	float unkn1_9;
	float unkn1_10;
	float unkn1_11;
	float unkn1_12;
}UVScroll_RE4<read="[UVScroll]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	uint unkn2;
	uint startingFrame;
	uint startingFrameRandom;
	float animationSpeed;
	float animationSpeedRandom;
	uint mode;
	int len_uvsPath;
	wstring uvsPath;
}UVSequence_DMC5<read="[UVSequence]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float minSpeed;
	float minSpeedRandom;
	float maxSpeed;
	float maxSpeedRandom;
}UVSequenceModifier_RE4<read="[UVSequenceModifier]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(6);
	ExpressionAssignType speed;
	ExpressionAssignType speedRand;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	EFXExpressionList expressions;
}UVSequenceExpression_DMC5<read="[UVSequenceExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version >= EfxVersion_RE2) { // end at: unkn1
		uint unkn1;
	}

	float unkn2_0;
	float unkn2_1;
	float unkn2_2;
}AlphaCorrection_RE7<read="[AlphaCorrection]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1;
	uint unkn2;
	if (Version >= EfxVersion_RE8) { // end at: re8_unkn2
		float re8_unkn1;
		float re8_unkn2;
	}

	float unkn3;
	if (Version < EfxVersion_RE8) { // end at: unkn4
		uint unkn4;
	}

	if (Version == EfxVersion_RE7) { // end at: toggle_re7
		uint toggle_re7;
	}

	if (Version >= EfxVersion_RE8) { // end at: re8_unkn000
		uint re8_unkn000;
	}

	Color color0;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	uint unkn13;
	uint unkn14;
	float unkn15;
	float unkn16;
	if (Version >= EfxVersion_RE2) { // end at: unkn17
		float unkn17;
	}

	if (Version >= EfxVersion_RE4) { // end at: re4_unkn3
		float re4_unkn1;
		float re4_unkn2;
		float re4_unkn3;
	}

	if (Version < EfxVersion_DD2) { // end at: unkn19
		uint unkn19;
	}

	if (Version >= EfxVersion_RERT) { // end at: sb_unkn5
		float sb_unkn2;
		float sb_unkn3;
		float sb_unkn4;
		float sb_unkn5;
	}

	if (Version == EfxVersion_RE4) { // end at: toggle_re4
		uint toggle_re4;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		float dd2_unkn1;
	}

	if (Version >= EfxVersion_RE2) { // end at: unkn20
		float unkn20;
	}

	if (Version >= EfxVersion_DD2) { // end at: toggle_dd2
		uint toggle_dd2;
	}

	if (Version >= EfxVersion_RE3) { // end at: unkn29
		float unkn21;
		if (Version > EfxVersion_RERT) { // end at: sb_unkn12
			float sb_unkn9;
			float sb_unkn10;
			float sb_unkn11;
			float sb_unkn12;
		}

		if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
			float dd2_unkn2;
		}

		uint unkn22;
		if (Version == EfxVersion_RE8) { // end at: re8_unkn5
			float re8_unkn3;
			float re8_unkn4;
			float re8_unkn5;
		}

		if (Version >= EfxVersion_RE8) { // end at: unkn24
			uint unkn24;
		}

		if (Version >= EfxVersion_RERT && Version < EfxVersion_MHWilds) { // end at: unkn29
			uint unkn25;
			uint unkn26;
			uint unkn27;
			uint unkn28;
			uint unkn29;
		}
	}

	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn_short
		float mhws_unkn1;
		float mhws_unkn2;
		short mhws_unkn_short;
	}

}ShaderSettings_RE7<read="[ShaderSettings]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(12);
	ExpressionAssignType ukn1;
	if (Version >= EfxVersion_RE8) { // end at: ukn7
		ExpressionAssignType ukn2;
		ExpressionAssignType ukn3;
		ExpressionAssignType ukn4;
		ExpressionAssignType ukn5;
		ExpressionAssignType ukn6;
		ExpressionAssignType ukn7;
	}

	if (Version >= EfxVersion_DD2) { // end at: ukn12
		ExpressionAssignType ukn8;
		ExpressionAssignType ukn9;
		ExpressionAssignType ukn10;
		ExpressionAssignType ukn11;
		ExpressionAssignType ukn12;
	}

	EFXExpressionList expressions;
}ShaderSettingsExpression_DMC5<read="[ShaderSettingsExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	int len_efxPath;
	wstring efxPath;
}PlayEfx_DMC5<read="[PlayEfx]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint efxrSize;
	if (efxrSize > 0) EFXR embedded_efxr <optimize=false>;
}PlayEmitter_DMC5<read="[PlayEmitter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn_toggle;
	int len_rtexPath;
	wstring rtexPath;
}RenderTarget_DMC5<read="[RenderTarget]">;

typedef struct {
	uint PropertyNameUTF8Hash;
	if (Version >= EfxVersion_RE3) { // end at: mdfPropertyIndex
		int mdfPropertyIndex;
	}

	ushort parameterCount;
	MaterialParameterType parameterType;
	if (Version < EfxVersion_RE3) { // end at: ukn1_2
		int ukn1_2;
	}

	if (Version >= EfxVersion_RE3) { // end at: unkn2
		int unkn2;
	}

	ubyte propertyValue[16] <optimize=false>;
}MdfProperty<read="[MdfProperty]">;

typedef struct {
}EfxMaterialStructBase<read="[EfxMaterialStructBase]">;

typedef struct {
	int maxPropertyIndex;
	int ukn1;
	int propertyCount;
	int texCount;
	int ukn2;
	int mdfPathLength;
	int mmtrPathLength;
	int texBlockSize;
	if (propertyCount > 0) MdfProperty properties[propertyCount] <optimize=false>;
	wstring mdfPath;
	wstring mmtrPath;
	if (texCount > 0) struct { wstring str; } texPaths[texCount] <read=str,optimize=false>;
}EfxMaterialStructV1<read="[EfxMaterialStructV1]">;

typedef struct {
	uint ukn1;
	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn
		float mhws_unkn;
	}

	int propertyCount;
	int texCount;
	uint ukn2;
	uint ukn3;
	uint ukn4;
	int len_mdfPath;
	wstring mdfPath;
	int len_mmtrPath;
	wstring mmtrPath;
	uint propDataSize;
	if (propertyCount > 0) MdfProperty properties[propertyCount] <optimize=false>;
	uint texBlockSize;
	if (texCount > 0) struct { wstring str; } texPaths[texCount] <read=str,optimize=false>;
}EfxMaterialStructV2<read="[EfxMaterialStructV2]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	uint unkn2;
	Color color;
}EmitterColor_RE4<read="[EmitterColor]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(4);
	uint unkn1;
	EfxClipData clipData;
}EmitterColorClip_RE4<read="[EmitterColorClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

}EmitterPriority_DMC5<read="[EmitterPriority]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	uint unkn1_4;
	uint unkn1_5;
	uint unkn1_6;
	float unkn1_7;
}EmitterShape2D_DMC5<read="[EmitterShape2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(5);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType size;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	EFXExpressionList expressions;
}EmitterShape2DExpression_RE4<read="[EmitterShape2DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float RangeXMin;
	float RangeXMax;
	float RangeYMin;
	float RangeYMax;
	float RangeZMin;
	float RangeZMax;
	uint ShapeType;
	uint RangeDivideNum;
	uint RangeDivideAxis;
	if (Version > EfxVersion_RE3) { // end at: unkn1_10
		uint emitCount;
		uint unkn1_10;
	}

	float LocalRotationX;
	float LocalRotationY;
	float LocalRotationZ;
	uint RotationOrder;
	if (Version >= EfxVersion_RE2) { // end at: unkn4_3
		if (Version == EfxVersion_MHRiseSB || Version == EfxVersion_RERT || Version == EfxVersion_RE8) { // end at: unkn2
			ubyte unkn2;
		}

		uint unkn3;
		if (Version >= EfxVersion_RE4) { // end at: re4_unkn0
			uint re4_unkn0;
		}

		float unkn4_0;
		float unkn4_1;
		float unkn4_2;
		float unkn4_3;
	}

}EmitterShape3D_RERT<read="[EmitterShape3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(9);
	ExpressionAssignType rangeXMin;
	ExpressionAssignType rangeXMax;
	ExpressionAssignType rangeYMin;
	ExpressionAssignType rangeYMax;
	ExpressionAssignType rangeZMin;
	ExpressionAssignType rangeZMax;
	if (Version >= EfxVersion_RE2) { // end at: spawnNum
		ExpressionAssignType spawnNum;
	}

	if (Version > EfxVersion_RE3) { // end at: unkn9
		ExpressionAssignType unkn8;
		ExpressionAssignType unkn9;
	}

	EFXExpressionList expressions;
}EmitterShape3DExpression_RE7<read="[EmitterShape3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	uint unkn1;
}ScreenSpaceEmitter_RE8<read="[ScreenSpaceEmitter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	ubyte unkn0_1;
	ubyte unkn0_2;
	ubyte unkn0_3;
	ubyte unkn0_4;
	float unkn1;
	int unkn2;
	int unkn3;
	uint unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	uint unkn11;
	uint unkn12;
	UndeterminedFieldType unkn13;
	UndeterminedFieldType unkn14;
	uint unkn15;
	uint unkn16;
	UndeterminedFieldType unkn17;
	float unkn18;
	float unkn19;
	if (Version > EfxVersion_RERT) { // end at: unkn25
		float unkn20;
		uint unkn21;
		UndeterminedFieldType unkn22;
		uint unkn23;
		uint unkn24;
		float unkn25;
	}

	int mapPathLength;
	int meshPathLength;
	int mdfPathLength;
	if (Version > EfxVersion_DMC5) { // end at: texPathLength
		int texPathLength;
	}

	int maskPathLength;
	if (Version >= EfxVersion_DD2) { // end at: nameLength
		int nameLength;
	}

	wstring mapPath;
	wstring meshPath;
	wstring mdfPath;
	if (Version > EfxVersion_DMC5) { // end at: texPath
		wstring texPath;
	}

	wstring maskPath;
	if (Version >= EfxVersion_DD2) { // end at: name
		wstring name;
	}

}MeshEmitter_DMC5<read="[MeshEmitter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(9);
	uint unkn1;
	EfxClipData clipData;
}MeshEmitterClip_DMC5<read="[MeshEmitterClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(16);
	ExpressionAssignType emitRate;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	EFXExpressionList expressions;
}MeshEmitterExpression_DMC5<read="[MeshEmitterExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
}FadeByAngle_DMC5<read="[FadeByAngle]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(2);
	ExpressionAssignType minAngle;
	ExpressionAssignType maxAngle;
	EFXExpressionList expressions;
}FadeByAngleExpression_DMC5<read="[FadeByAngleExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float nearStart;
	float nearEnd;
	float farStart;
	float farEnd;
}FadeByDepth_DMC5<read="[FadeByDepth]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(4);
	ExpressionAssignType nearStart;
	ExpressionAssignType nearEnd;
	ExpressionAssignType farStart;
	ExpressionAssignType farEnd;
	EFXExpressionList expressions;
}FadeByDepthExpression_DMC5<read="[FadeByDepthExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	if (Version >= EfxVersion_DD2) { // end at: unkn1_6
		UndeterminedFieldType unkn1_6;
	}

}FadeByEmitterAngle_DMC5<read="[FadeByEmitterAngle]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1;
	uint unkn2;
	float unkn3;
	float unkn4;
}FadeByOcclusion_DMC5<read="[FadeByOcclusion]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint null1;
	float unkn2;
	float unkn3;
	float unkn4;
	float null5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float null13;
	float null14;
	float null15;
	uint unkn16;
}FadeByRootCulling_DD2<read="[FadeByRootCulling]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
	float unkn1_10;
	float unkn1_11;
	float unkn1_12;
	float unkn1_13;
	float unkn1_14;
	if (Version >= EfxVersion_RE8) { // end at: unkn1_17
		float unkn1_15;
		UndeterminedFieldType unkn1_16;
		float unkn1_17;
	}

	uint unkn1_18;
	int unkn1_19;
}VectorFieldParameter_RE2<read="[VectorFieldParameter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(13);
	uint unkn1;
	EfxClipData clipData;
}VectorFieldParameterClip_DMC5<read="[VectorFieldParameterClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(20);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	if (Version > EfxVersion_DMC5) { // end at: unkn20
		ExpressionAssignType unkn12;
		ExpressionAssignType unkn13;
		ExpressionAssignType unkn14;
		ExpressionAssignType unkn15;
		ExpressionAssignType unkn16;
		ExpressionAssignType unkn17;
		ExpressionAssignType unkn18;
		ExpressionAssignType unkn19;
		ExpressionAssignType unkn20;
	}

	EFXExpressionList expressions;
}VectorFieldParameterExpression_DMC5<read="[VectorFieldParameterExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	UndeterminedFieldType unkn7;
	UndeterminedFieldType unkn8;
	UndeterminedFieldType unkn9;
	UndeterminedFieldType unkn10;
	UndeterminedFieldType unkn11;
}GlobalVectorField_RE8<read="[GlobalVectorField]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
	float unkn7;
	UndeterminedFieldType unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	UndeterminedFieldType unkn12;
	float unkn13;
	UndeterminedFieldType unkn14;
}DirectionalFieldParameter_RE8<read="[DirectionalFieldParameter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn0
		uint dd2_unkn0;
	}

	float unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	if (Version >= EfxVersion_RE8) { // end at: unkn9
		float unkn8;
		float unkn9;
	}

	if (Version >= EfxVersion_DD2) { // end at: unkn11
		float unkn10;
		float unkn11;
	}

}FluidEmitter2D_RE7<read="[FluidEmitter2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(2);
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	EFXExpressionList expressions;
}FluidEmitter2DExpression_DD2<read="[FluidEmitter2DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	ubyte unkn0_1;
	ubyte unkn0_2;
	ubyte unkn0_3;
	ubyte unkn0_4;
	uint unkn1;
	uint unkn2;
	uint unkn3;
	uint unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	uint unkn9;
	uint unkn10;
	uint unkn11;
	uint unkn12;
	float unkn13;
	float unkn14;
	float unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	uint unkn19;
	uint unkn20;
	uint unkn21;
	uint unkn22;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn2
		float re4_unkn1;
		float re4_unkn2;
	}

	float unkn1_23;
	float unkn1_24;
	float unkn1_25;
	float unkn1_26;
	float unkn1_27;
	if (Version >= EfxVersion_RE8) { // end at: unkn1_29_re8
		float unkn1_28_re8;
		float unkn1_29_re8;
	}

	if (Version < EfxVersion_RE8) { // end at: unkn1_29_re3
		int unkn1_28_re3;
		int unkn1_29_re3;
	}

	float unkn1_30;
	float unkn1_31;
	float unkn1_32;
	float unkn1_33;
	if (Version < EfxVersion_DD2) { // end at: unkn1_34_v1
		float unkn1_34_v1;
	}

	if (Version >= EfxVersion_DD2) { // end at: unkn1_34_v2
		uint unkn1_34_v2;
	}

	float unkn1_35;
	if (Version >= EfxVersion_RE4) { // end at: re4_unk2_10
		float re4_unk2_0;
		float re4_unk2_1;
		float re4_unk2_2;
		float re4_unk2_3;
		float re4_unk2_4;
		float re4_unk2_5;
		float re4_unk2_6;
		float re4_unk2_7;
		float re4_unk2_8;
		float re4_unk2_9;
		float re4_unk2_10;
	}

	if (Version < EfxVersion_DD2) { // end at: unkn1_36_v1
		uint unkn1_36_v1;
	}

	if (Version >= EfxVersion_DD2) { // end at: unkn1_36_v2
		float unkn1_36_v2;
	}

	float unkn1_37;
	float unkn1_38;
	if (Version >= EfxVersion_RE8) { // end at: unkn1_39_re8
		float unkn1_39_re8;
	}

	if (Version < EfxVersion_RE8) { // end at: unkn1_39_re3
		int unkn1_39_re3;
	}

	float unkn1_40;
	if (Version < EfxVersion_RE4) { // end at: unkn1_41
		float unkn1_41;
	}

	if (Version >= EfxVersion_RE8) { // end at: unkn1_42_re8
		int unkn1_42_re8;
	}

	if (Version < EfxVersion_RE8) { // end at: unkn1_42_re3
		float unkn1_42_re3;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unk2
		float dd2_unk1;
		uint dd2_unk2;
	}

	if (Version < EfxVersion_RERT) { // end at: unkn2_0
		UndeterminedFieldType unkn2_0;
	}

	if (Version != EfxVersion_RE8) { // end at: unkn2_2
		uint unkn2_1;
		uint unkn2_2;
	}

	if (Version >= EfxVersion_RE4) { // end at: re4_unk3_3
		float re4_unk3_1;
		float re4_unk3_2;
		uint re4_unk3_3;
	}

	uint extraByteCount;
	uint path1Size;
	uint path2Size;
	uint path3Size;
	uint path4Size;
	if (Version <= EfxVersion_RE3 || Version >= EfxVersion_RE4) { // end at: path5Size
		uint path5Size;
	}

	wstring uvsPath1;
	wstring uvsPath2;
	wstring uvsPath3;
	wstring uvsPath4;
	if (Version <= EfxVersion_RE3 || Version >= EfxVersion_RE4) { // end at: uvsPath5
		wstring uvsPath5;
	}

	if (extraByteCount > 0) ubyte extraBytes[extraByteCount] <optimize=false>;
	if (Version >= EfxVersion_DD2) { // end at: gradient
		if (re4_unk3_3 > 0) FloatWithColor gradient[re4_unk3_3] <optimize=false>;
	}

}FluidSimulator2D_RE2<read="[FluidSimulator2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	float unkn1;
	float unkn2;
	if (Version >= EfxVersion_RE8) { // end at: unkn3
		float unkn3;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn12
		float unkn4;
		UndeterminedFieldType unkn5;
		if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn1
			float mhws_unkn1;
		}

		float unkn6;
		UndeterminedFieldType unkn7;
		float unkn8;
		UndeterminedFieldType unkn9;
		float radians10;
		if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn2
			UndeterminedFieldType mhws_unkn2;
		}

		float unkn11;
		UndeterminedFieldType unkn12;
	}

}DepthOperator_RE2<read="[DepthOperator]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	DistortionType distortionType;
	float unkn2_strength;
	if (Version >= EfxVersion_RE3) { // end at: color
		float unkn3;
		float unkn4;
		if (Version >= EfxVersion_RE8) { // end at: color
			Color color;
		}
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
		float dd2_unkn1;
		ubyte dd2_unkn2;
	}

}Distortion_RE7<read="[Distortion]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(5);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	EFXExpressionList expressions;
}DistortionExpression_DD2<read="[DistortionExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version >= EfxVersion_RE4) { // end at: unkn0
		uint unkn0;
	}

	float unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	if (Version >= EfxVersion_RE4) { // end at: unkn17
		float unkn6;
		float unkn7;
		float unkn8;
		float unkn9;
		float unkn10;
		float unkn11;
		float unkn12;
		float unkn13;
		float unkn14;
		float unkn15;
		float unkn16;
		float unkn17;
	}

	float unkn18;
}ProceduralDistortion_RE4<read="[ProceduralDistortion]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	UndeterminedFieldType unkn;
}ProceduralDistortionDelayFrame_RE4<read="[ProceduralDistortionDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(7);
	UndeterminedFieldType unkn1;
	EfxClipData clipData;
}ProceduralDistortionClip_RE4<read="[ProceduralDistortionClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(18);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	EFXExpressionList expressions;
}ProceduralDistortionExpression_DD2<read="[ProceduralDistortionExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn0;
	float unkn1;
	float unkn2;
	uint unkn3;
	float unkn4;
}FakeDoF_DMC5<read="[FakeDoF]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	uint unkn5;
	uint unkn6;
}WindInfluence3D_RE8<read="[WindInfluence3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn2;
}WindInfluence3DDelayFrame_DD2<read="[WindInfluence3DDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn;
}DepthOcclusion_RE8<read="[DepthOcclusion]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	UndeterminedFieldType unkn2;
	float unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	float unkn7;
	uint unkn8;
	uint unkn9;
	float unkn10;
	float unkn11;
	UndeterminedFieldType unkn12;
	UndeterminedFieldType unkn13;
	UndeterminedFieldType unkn14;
	uint unkn15;
	uint unkn16;
}PlaneCollider_RE8<read="[PlaneCollider]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	int unkn1_1;
	int unkn1_2;
	int unkn1_3;
	int unkn1_4;
	if (Version >= EfxVersion_RE3) { // end at: unkn1_9
		int unkn1_5;
		if (Version > EfxVersion_RE3) { // end at: unkn1_9
			int unkn1_6;
			int unkn1_7;
			int unkn1_8;
			int unkn1_9;
		}
	}

}FixRandomGenerator_DMC5<read="[FixRandomGenerator]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unknShaderCRCHash0;
	uint unknShaderCRCHash1;
	uint unknShaderCRCHash2;
	uint unknShaderCRCHash3;
	uint unknShaderCRCHash4;
	uint unknShaderCRCHash5;
	UndeterminedFieldType unkn3;
	uint unknShaderCRCHash6;
	uint unknShaderCRCHash7;
	uint unknShaderCRCHash8;
	uint unknShaderCRCHash9;
	uint unknShaderCRCHash10;
	uint unknShaderCRCHash11;
	UndeterminedFieldType unkn10;
	uint unknShaderCRCHash12;
	uint unknShaderCRCHash13;
	uint unknShaderCRCHash14;
	uint unknShaderCRCHash15;
	uint unknShaderCRCHash16;
	uint unknShaderCRCHash17;
	UndeterminedFieldType unkn18;
	if (Version >= EfxVersion_MHWilds) { // end at: unknShaderCRCHash20
		uint unknShaderCRCHash18;
		uint unknShaderCRCHash19;
		uint unknShaderCRCHash20;
	}

	uint unknShaderCRCHash21;
	ByteSet unkn20;
	int len_shaderPath;
	wstring shaderPath;
}EffectOptimizeShader_DD2<read="[EffectOptimizeShader]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float positionX;
	float positionY;
	float positionZ;
	float attractionForce;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	if (Version >= EfxVersion_DD2) { // end at: unkn1_10
		float unkn1_8;
		float unkn1_9;
		float unkn1_10;
	}

	int len_boneName;
	wstring boneName;
}Attractor_RERT<read="[Attractor]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(7);
	uint unkn1;
	EfxClipData clipData;
}AttractorClip_RE8<read="[AttractorClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(10);
	ExpressionAssignType posX;
	ExpressionAssignType posY;
	ExpressionAssignType posZ;
	ExpressionAssignType posX_2;
	ExpressionAssignType posY_2;
	ExpressionAssignType posZ_2;
	ExpressionAssignType attractionForce;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	EFXExpressionList expressions;
}AttractorExpression_RE4<read="[AttractorExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		uint dd2_unkn1;
	}

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
}Blink_RE4<read="[Blink]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	Color color0;
	Color color1;
	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
}ColorGrading_RE4<read="[ColorGrading]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	uint unkn1_4;
	float unkn1_5;
}ContrastHighlighter_RE4<read="[ContrastHighlighter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0_0;
	uint unkn0_1;
	uint unkn0_2;
}DrawOverlay_DMC5<read="[DrawOverlay]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint mask;
}EmitMask_RE4<read="[EmitMask]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

}IgnorePlayerColor_RE2<read="[IgnorePlayerColor]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	if (Version >= EfxVersion_RE3) { // end at: unkn1_toggle
		uint unkn1_toggle;
	}

	float unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
}LuminanceBleed_RERT<read="[LuminanceBleed]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
}Noise_RE4<read="[Noise]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(8);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	EFXExpressionList expressions;
}NoiseExpression_RE4<read="[NoiseExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint blurRotation;
	uint two;
	float blurAmount;
	float unkn4;
	float unkn5;
	float unknBlurScaleX;
	float unknBlurScaleY;
	float blurOpacity;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
}StretchBlur_RE4<read="[StretchBlur]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	Color unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
	uint unkn1_10;
	uint unkn1_11;
	uint unkn1_12;
	uint unkn1_13;
	uint unkn1_14;
	uint unkn1_15;
	uint unkn1_16;
}TexelChannelOperator_RE4<read="[TexelChannelOperator]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	UndeterminedFieldType unkn1_9;
	float unkn1_10;
	float unkn1_11;
	int len_boneName;
	wstring boneName;
}VanishArea3D_RE4<read="[VanishArea3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(14);
	ExpressionAssignType positionX;
	ExpressionAssignType positionY;
	ExpressionAssignType positionZ;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	EFXExpressionList expressions;
}VanishArea3DExpression_RE4<read="[VanishArea3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(2);
	uint unkn1;
	EfxClipData clipData;
}TexelChannelOperatorClip_RE4<read="[TexelChannelOperatorClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color1;
	Color color2;
	float unkn3;
	float unkn4;
	float unkn5;
	Color color3;
	Color color4;
	float unkn8;
	float unkn9;
	float unkn10;
	ubyte ukn2_0;
	uint ukn2_1;
	uint ukn2_2;
	uint ukn2_3;
	uint ukn2_4;
	uint ukn2_5;
	uint ukn2_6;
	ubyte ukn3_0;
	uint ukn3_1;
	ubyte ukn4_0;
	uint ukn4_1;
	uint ukn4_2;
	uint ukn4_3;
	uint ukn4_4;
	uint ukn4_5;
	uint ukn4_6;
	ubyte ukn5_0;
	uint ukn5_1;
}RgbCommon_RE4<read="[RgbCommon]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(13);
	ExpressionAssignType particleColor;
	ExpressionAssignType unkn2;
	ExpressionAssignType colorIntensityGreen;
	ExpressionAssignType colorSaturate;
	ExpressionAssignType unkn5;
	ExpressionAssignType particleColor2;
	ExpressionAssignType unkn7;
	ExpressionAssignType colorIntensityRed;
	ExpressionAssignType alpha1;
	ExpressionAssignType alpha2;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	ExpressionAssignType unkn22;
	EFXExpressionList expressions;
}RgbCommonExpression_DD2<read="[RgbCommonExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	ByteSet unkn0;
	float unkn1;
	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn
		float mhws_unkn;
	}

	ByteSet unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	ubyte toggle_b1;
	uint unkn6;
	UndeterminedFieldType unkn7;
	uint unkn8;
	UndeterminedFieldType unkn9;
	ubyte toggle_b2;
	UndeterminedFieldType unkn10;
	UndeterminedFieldType unkn11;
	UndeterminedFieldType unkn12;
	UndeterminedFieldType unkn13;
	UndeterminedFieldType unkn14;
	uint unkn15;
	UndeterminedFieldType unkn16;
	uint unkn17;
	UndeterminedFieldType unkn18;
	UndeterminedFieldType unkn19;
	ubyte toggle_b3;
	UndeterminedFieldType unkn20;
	UndeterminedFieldType unkn21;
	uint unkn22;
	UndeterminedFieldType unkn23;
	uint unkn24;
	UndeterminedFieldType unkn25;
	UndeterminedFieldType unkn26;
}RgbWater_DD2<read="[RgbWater]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(13);
	ExpressionAssignType particleColor;
	ExpressionAssignType unkn2;
	ExpressionAssignType colorIntensityGreen;
	ExpressionAssignType colorSaturate;
	ExpressionAssignType unkn5;
	ExpressionAssignType particleColor2;
	ExpressionAssignType unkn7;
	ExpressionAssignType colorIntensityRed;
	ExpressionAssignType alpha1;
	ExpressionAssignType alpha2;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	ExpressionAssignType unkn22;
	ExpressionAssignType unkn23;
	ExpressionAssignType unkn24;
	ExpressionAssignType unkn25;
	ExpressionAssignType unkn26;
	ExpressionAssignType unkn27;
	EFXExpressionList expressions;
}RgbWaterExpression_MHWilds<read="[RgbWaterExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	int len_flowmapMaskPath;
	wstring flowmapMaskPath;
}FlowMap_MHWilds<read="[FlowMap]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	ushort unkn1;
	uint unkn2;
	uint unkn3;
	int len_efcsvPath;
	wstring efcsvPath;
	int len_unknString0;
	wstring unknString0;
	int len_unknString1;
	wstring unknString1;
	int len_unknString2;
	wstring unknString2;
}AssignCSV_RE4<read="[AssignCSV]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	UndeterminedFieldType unkn2;
	UndeterminedFieldType unkn3;
	uint unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	UndeterminedFieldType unkn7;
	int len_efcsvPath;
	wstring efcsvPath;
	int len_unknPath2;
	wstring unknPath2;
	int len_unknPath3;
	wstring unknPath3;
	int len_unknPath4;
	wstring unknPath4;
}DestinationCSV_DD2<read="[DestinationCSV]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	byte unkn1;
	float unkn2;
	UndeterminedFieldType unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	short unkn8;
	float unkn9;
	UndeterminedFieldType unkn10;
	float unkn11;
	UndeterminedFieldType unkn12;
	float unkn13;
}TerrainSnap_DD2<read="[TerrainSnap]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	UndeterminedFieldType unkn2;
	float unkn3;
}Trigger_DD2<read="[Trigger]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

}PtBehaviorVariableDataBase<read="[PtBehaviorVariableDataBase]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	Color color;
	if (size - 4 > 0) ubyte restData[size - 4] <optimize=false>;
}PtBehaviorVariableDataColor<read="[PtBehaviorVariableDataColor]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	int value;
	if (size - 4 > 0) ubyte restData[size - 4] <optimize=false>;
}PtBehaviorVariableInteger<read="[PtBehaviorVariableInteger]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	float value;
	if (size - 4 > 0) ubyte restData[size - 4] <optimize=false>;
}PtBehaviorVariableFloat<read="[PtBehaviorVariableFloat]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	Vec2 Vec;
	if (size - 8 > 0) ubyte restData[size - 8] <optimize=false>;
}PtBehaviorVariableFloat2<read="[PtBehaviorVariableFloat2]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	Vec3 vec;
	if (size - 12 > 0) ubyte restData[size - 12] <optimize=false>;
}PtBehaviorVariableFloat3<read="[PtBehaviorVariableFloat3]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	wstring prefabPath;
}PtBehaviorVariableDataPrefabPath<read="[PtBehaviorVariableDataPrefabPath]">;

typedef struct {
	int unkn;
	int size;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		short re4_unkn0;
		short re4_unkn1;
	}

	if (size > 0) ubyte data[size] <optimize=false>;
}PtBehaviorVariableDataPrefabUnknown<read="[PtBehaviorVariableDataPrefabUnknown]">;

typedef struct {
	int varSize;
	PtBehaviorPropType dataType;
	if (dataType == PtBehaviorPropType_PropColor) {
		PtBehaviorVariableDataColor variable;
	} else if (dataType == PtBehaviorPropType_PropPrefabpath) {
		PtBehaviorVariableDataPrefabPath variable;
	} else if (dataType == PtBehaviorPropType_PropInt) {
		PtBehaviorVariableInteger variable;
	} else if (dataType == PtBehaviorPropType_PropEnum) {
		PtBehaviorVariableInteger variable;
	} else if (dataType == PtBehaviorPropType_PropFloat) {
		PtBehaviorVariableFloat variable;
	} else if (dataType == PtBehaviorPropType_PropFloat2) {
		PtBehaviorVariableFloat2 variable;
	} else if (dataType == PtBehaviorPropType_PropFloat3) {
		PtBehaviorVariableFloat3 variable;
	} else {
		PtBehaviorVariableDataPrefabUnknown variable;
	}
	if (Version >= EfxVersion_MHWilds) { // end at: varHash
		uint varHash;
	}

	string behaviorProperty;
}PtBehaviorVariable<read="[PtBehaviorVariable]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	int behaviorStringLength;
	if (Version < EfxVersion_MHWilds) { // end at: varCount
		int varCount;
	}

	string behaviorString;
	if (Version >= EfxVersion_MHWilds) { // end at: varCount_mhws
		int varCount_mhws;
	}

	if (Version < EfxVersion_MHWilds ? varCount : varCount_mhws > 0) PtBehaviorVariable properties[Version < EfxVersion_MHWilds ? varCount : varCount_mhws] <optimize=false>;
}PtBehavior_RE4<read="[PtBehavior]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint dataFlags;
	float unkn1;
	float unkn2;
	uint linkedAction;
	if ((dataFlags & (1 << 10)) != 0) { // end at: ukn_flag2_11
		uint ukn_flag2_0;
		float ukn_flag2_2;
		float ukn_flag2_3;
		float ukn_flag2_4;
		float ukn_flag2_5;
		uint ukn_flag2_6;
		float ukn_flag2_7;
		float ukn_flag2_8;
		float ukn_flag2_9;
		float ukn_flag2_10;
		float ukn_flag2_11;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
		uint dd2_unkn0;
		uint dd2_unkn1;
		uint dd2_unkn2;
	}

	if ((dataFlags & (1 << 1)) != 0) { // end at: unknString_flag2
		int len_unknString_flag2;
		wstring unknString_flag2;
	}

	if ((dataFlags & (1 << 0)) != 0) { // end at: unknString_flag1
		int len_unknString_flag1;
		wstring unknString_flag1;
	}

}PtColliderAction_DMC5<read="[PtColliderAction]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	ubyte stringBitFlag;
	ubyte unkn0_1;
	ubyte unkn0_2;
	ubyte unkn0_3;
	float unkn1;
	float unkn2;
	uint unkn3;
	uint unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	uint unkn9;
	if (Version > EfxVersion_RE7) { // end at: unkn16
		float unkn10;
		float unkn11;
		float unkn12;
		if (Version < EfxVersion_MHWilds) { // end at: unkn16
			float unkn13;
			if (Version > EfxVersion_RE3) { // end at: unkn16
				float unkn14;
				if (Version > EfxVersion_RERT) { // end at: unkn16
					uint unkn15;
					float unkn16;
				}
			}
		}
	}

	if ((stringBitFlag & (1 << 0)) != 0) { // end at: unknString0
		int len_unknString0;
		wstring unknString0;
	}

	if ((stringBitFlag & (1 << 1)) != 0) { // end at: unknString1
		int len_unknString1;
		wstring unknString1;
	}

}PtCollision_RE7<read="[PtCollision]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	float unkn2;
	float unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	UndeterminedFieldType unkn7;
}PtProjection_MHWilds<read="[PtProjection]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	uint unkn2;
	Color color0;
}PtColor_RE7<read="[PtColor]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(4);
	uint unkn1;
	EfxClipData clipData;
}PtColorClip_DMC5<read="[PtColorClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	uint unkn1_1;
	int actionIndex;
}PtLife_RE7<read="[PtLife]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn;
}PtSort_RE8<read="[PtSort]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	uint unkn1_1;
	if (Version <= EfxVersion_RE3) { // end at: unkn1_2
		uint unkn1_2;
	}

	float unkn1_3;
}PtUvSequence_DMC5<read="[PtUvSequence]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(3);
	uint unkn1;
	EfxClipData clipData;
}PtUvSequenceClip_DMC5<read="[PtUvSequenceClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	UndeterminedFieldType unkn0;
	UndeterminedFieldType unkn1;
	UndeterminedFieldType unkn2;
	UndeterminedFieldType unkn3;
	UndeterminedFieldType unkn4;
	uint unkn5;
	UndeterminedFieldType unkn6;
	UndeterminedFieldType unkn7;
	uint unkn8;
	UndeterminedFieldType unkn9;
}PtFreezer_DD2<read="[PtFreezer]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	typedef struct PtPathTranslateSubstruct_t {
		float unkn0;
		float unkn1;
		float unkn2;
		float unkn3;
		float unkn4;
		float unkn5;
		float unkn6;
	} PtPathTranslateSubstruct ;
	uint unkn1;
	uint unkn2;
	float unkn3;
	int dataSize;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	Vec3 rotation;
	Vec3 scale;
	if (dataSize > 0) PtPathTranslateSubstruct substruct2[dataSize] <optimize=false>;
}PtPathTranslate_RE4<read="[PtPathTranslate]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	Vec2 position;
	float rotation;
	Vec2 scale;
}Transform2D_DMC5<read="[Transform2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn0;
	uint ukn1;
	uint ukn2;
	uint ukn3;
	uint ukn4;
	uint ukn5_0;
	uint ukn5_1;
	uint ukn5_2;
	uint ukn5_3;
	uint ukn5_4;
	uint ukn5_5;
	uint ukn5_6;
	uint ukn5_7;
	uint ukn5_8;
	uint ukn5_9;
	uint ukn5_10;
	uint ukn5_11;
	uint ukn5_12;
	uint ukn5_13;
	uint ukn5_14;
	uint ukn5_15;
	uint ukn5_16;
	uint ukn5_17;
	uint ukn5_18;
	uint ukn5_19;
	uint ukn5_20;
	uint ukn5_21;
	uint ukn5_22;
	uint ukn5_23;
	uint ukn5_24;
	uint ukn5_25;
	uint ukn5_26;
	uint ukn5_27;
	uint ukn5_28;
	uint ukn5_29;
	uint ukn5_30;
	uint ukn5_31;
	uint ukn5_32;
	uint ukn5_33;
	ubyte ukn6;
	uint ukn7_0;
	uint ukn7_1;
	uint ukn7_2;
	uint ukn7_3;
	uint ukn7_4;
	uint ukn7_5;
	uint ukn7_6;
	ubyte ukn8_0;
	ubyte ukn8_1;
	uint ukn9;
}Transform2DClip_RERT<read="[Transform2DClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(5);
	ExpressionAssignType posX;
	ExpressionAssignType posY;
	ExpressionAssignType rot;
	ExpressionAssignType scaleX;
	ExpressionAssignType scaleY;
	EFXExpressionList expressions;
}Transform2DExpression_RE2<read="[Transform2DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn1;
}Transform2DModifierDelayFrame_RE4<read="[Transform2DModifierDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	Vec3 translation;
	Vec3 rotation;
	Vec3 scale;
	int rotationOrder;
}Transform3D_DMC5<read="[Transform3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(9);
	ExpressionAssignType translationX;
	ExpressionAssignType translationY;
	ExpressionAssignType translationZ;
	ExpressionAssignType rotationX;
	ExpressionAssignType rotationY;
	ExpressionAssignType rotationZ;
	ExpressionAssignType scaleX;
	ExpressionAssignType scaleY;
	ExpressionAssignType scaleZ;
	EFXExpressionList expressions;
}Transform3DExpression_DMC5<read="[Transform3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(9);
	uint unkn1;
	EfxClipData clipData;
}Transform3DClip_DMC5<read="[Transform3DClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn1;
}Transform3DModifierDelayFrame_RE4<read="[Transform3DModifierDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	uint unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	UndeterminedFieldType unkn14;
	float unkn15;
	UndeterminedFieldType unkn16;
	float unkn17;
	UndeterminedFieldType unkn18;
	float unkn19;
	float unkn20;
	float unkn21;
	UndeterminedFieldType unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	UndeterminedFieldType unkn26;
	float unkn27;
	float unkn28;
	float unkn29;
	UndeterminedFieldType unkn30;
	float unkn31;
	float unkn32;
	float unkn33;
	UndeterminedFieldType unkn34;
	float unkn35;
	float unkn36;
	float unkn37;
	float unkn38;
	float unkn39;
	float unkn40;
	float unkn41;
	float unkn42;
	float unkn43;
	float unkn44;
	float unkn45;
	UndeterminedFieldType unkn46;
	float unkn47;
	UndeterminedFieldType unkn48;
	float unkn49;
	UndeterminedFieldType unkn50;
	float unkn51;
	float unkn52;
	float unkn53;
	UndeterminedFieldType unkn54;
}Transform3DModifier_RE2<read="[Transform3DModifier]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn0;
	float unkn1;
	UndeterminedFieldType unkn2;
	float unkn3;
	float unkn4;
}PtTransform2D_DMC5<read="[PtTransform2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(5);
	UndeterminedFieldType unkn1;
	EfxClipData clipData;
}PtTransform2DClip_RE8<read="[PtTransform2DClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	Vec3 position;
	Vec3 rotation;
	Vec3 scale;
}PtTransform3D_RE7<read="[PtTransform3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(9);
	uint unkn1;
	EfxClipData clipData;
}PtTransform3DClip_RE7<read="[PtTransform3DClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(9);
	ExpressionAssignType posX;
	ExpressionAssignType posY;
	ExpressionAssignType posZ;
	ExpressionAssignType rotationX;
	ExpressionAssignType rotationY;
	ExpressionAssignType rotationZ;
	ExpressionAssignType scaleX;
	ExpressionAssignType scaleY;
	ExpressionAssignType scaleZ;
	EFXExpressionList expressions;
}PtTransform3DExpression_DD2<read="[PtTransform3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	float rotateSpeedX;
	float rotateSpeedXRandom;
	float rotateSpeedY;
	float rotateSpeedYRandom;
	float rotateSpeedZ;
	float rotateSpeedZRandom;
	float unkn4_2;
	float unkn4_3;
	float unkn4_4;
	float unkn4_5;
	float unkn4_6;
	float unkn4_7;
	if (Version >= EfxVersion_DD2) { // end at: unkn4_9
		uint unkn4_8;
		uint unkn4_9;
	}

}RotateAnim_DMC5<read="[RotateAnim]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn2;
}RotateAnimDelayFrame_RE4<read="[RotateAnimDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(12);
	ExpressionAssignType rotateSpeedX;
	ExpressionAssignType rotateSpeedXRand;
	ExpressionAssignType rotateSpeedY;
	ExpressionAssignType rotateSpeedYRand;
	ExpressionAssignType rotateSpeedZ;
	ExpressionAssignType rotateSpeedZRand;
	ExpressionAssignType ukn1_7;
	ExpressionAssignType ukn1_8;
	ExpressionAssignType ukn1_9;
	ExpressionAssignType ukn1_10;
	ExpressionAssignType ukn1_11;
	ExpressionAssignType ukn1_12;
	EFXExpressionList expressions;
}RotateAnimExpression_RE7<read="[RotateAnimExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float minScale;
	float unkn1_1;
	float maxScale;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
	float unkn1_10;
	float unkn1_11;
	float unkn1_12;
	float unkn1_13;
	float unkn1_14;
	float unkn1_15;
	if (Version >= EfxVersion_DD2) { // end at: unkn1_17
		uint unkn1_16;
		uint unkn1_17;
	}

}ScaleAnim_DMC5<read="[ScaleAnim]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn2;
}ScaleAnimDelayFrame_RE4<read="[ScaleAnimDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(8);
	ExpressionAssignType scale;
	ExpressionAssignType scaleRand;
	if (Version >= EfxVersion_RERT) { // end at: unkn8
		ExpressionAssignType unkn3;
		ExpressionAssignType unkn4;
		ExpressionAssignType unkn5;
		ExpressionAssignType unkn6;
		ExpressionAssignType unkn7;
		ExpressionAssignType unkn8;
	}

	EFXExpressionList expressions;
}ScaleAnimExpression_DMC5<read="[ScaleAnimExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	float unkn2_0;
	float unkn2_1;
	float unkn2_2;
	float unkn2_3;
	float unkn2_4;
	float unkn2_5;
}ScaleByDepth_RE4<read="[ScaleByDepth]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color unkn1;
	Color unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	uint unkn15;
}TypeBillboard2D_RE7<read="[TypeBillboard2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(13);
	ExpressionAssignType color;
	ExpressionAssignType alpha;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	if (Version >= EfxVersion_RERT) { // end at: unkn13
		ExpressionAssignType unkn8;
		ExpressionAssignType unkn9;
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
		if (Version > EfxVersion_RERT) { // end at: unkn13
			ExpressionAssignType unkn13;
		}
	}

	EFXExpressionList expressions;
}TypeBillboard2DExpression_RE7<read="[TypeBillboard2DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color0;
	Color color1;
	float unknOpacityValue;
	float ColorRate;
	float AlphaRate;
	float Rotation;
	float RotationVariation;
	float SizeScaler;
	float SizeScalerVariation;
	float SizeX;
	float SizeXVariation;
	float SizeY;
	float SizeYVariation;
	float unkn13;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	uint unkn14;
	if (Version >= EfxVersion_RE2) { // end at: unkn16
		float unkn15;
		float unkn16;
	}

}TypeBillboard3D_DMC5<read="[TypeBillboard3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(13);
	ExpressionAssignType color;
	ExpressionAssignType colorRange;
	ExpressionAssignType alpha;
	ExpressionAssignType alphaRate;
	ExpressionAssignType emissive;
	if (Version >= EfxVersion_RE2) { // end at: unkn6
		ExpressionAssignType unkn6;
	}

	ExpressionAssignType size;
	ExpressionAssignType sizeRand;
	if (Version >= EfxVersion_RE3) { // end at: unkn12
		ExpressionAssignType unkn9;
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn13
		ExpressionAssignType unkn13;
	}

	EFXExpressionList expressions;
}TypeBillboard3DExpression_DMC5<read="[TypeBillboard3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn0;
	Color ukn1;
	Color ukn2;
	float ukn3;
	float ukn4;
	float ukn5;
	float ukn6;
	float ukn7;
	float ukn8;
	float ukn9;
	float ukn10;
	float ukn11;
	float ukn12;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypeBillboard3DMaterial_DD2<read="[TypeBillboard3DMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(5);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeBillboard3DMaterialClip_DD2<read="[TypeBillboard3DMaterialClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(13);
	ExpressionAssignType color;
	ExpressionAssignType ukn2;
	ExpressionAssignType ukn3;
	ExpressionAssignType ukn4;
	ExpressionAssignType ukn5;
	ExpressionAssignType ukn6;
	ExpressionAssignType size;
	ExpressionAssignType ukn8;
	ExpressionAssignType ukn9;
	ExpressionAssignType ukn10;
	ExpressionAssignType ukn11;
	ExpressionAssignType ukn12;
	EFXExpressionList expressions;
	ExpressionAssignType ukn13;
	uint materialExpressionCount;
	EFXMaterialExpressionList materialExpressions;
}TypeBillboard3DMaterialExpression_DD2<read="[TypeBillboard3DMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	uint unkn1_1;
	uint unkn1_2;
	if (Version >= EfxVersion_RE2) { // end at: unkn1_3
		uint unkn1_3;
	}

	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
	Color color1;
	if (Version >= EfxVersion_RE2) { // end at: color2
		Color color2;
	}

	float unkn2_1;
	if (Version >= EfxVersion_RE2) { // end at: re2_unkn1_2
		float re2_unkn1_1;
		float re2_unkn1_2;
	}

	float unkn2_2;
	float unkn2_3;
	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	float unkn2_7;
	Color color3;
	if (Version >= EfxVersion_RE2) { // end at: color4
		Color color4;
	}

	float unkn3_1;
	if (Version >= EfxVersion_RE2) { // end at: re2_unkn2_2
		float re2_unkn2_1;
		float re2_unkn2_2;
	}

	float unkn3_2;
	float unkn3_3;
	float unkn3_4;
	float unkn3_5;
	float unkn3_6;
	float unkn3_7;
	Color color5;
	if (Version >= EfxVersion_RE2) { // end at: color6
		Color color6;
	}

	float unkn4_1;
	if (Version >= EfxVersion_RE2) { // end at: re2_unkn3_2
		float re2_unkn3_1;
		float re2_unkn3_2;
	}

	float unkn4_2;
	float unkn4_3;
	float unkn4_4;
	float unkn4_5;
	float unkn4_6;
	float unkn4_7;
	Color color7;
	if (Version >= EfxVersion_RE2) { // end at: color8
		Color color8;
	}

	float unkn5_1;
	if (Version >= EfxVersion_RE2) { // end at: re2_unkn4_2
		float re2_unkn4_1;
		float re2_unkn4_2;
	}

	float unkn5_2;
	float unkn5_3;
	float unkn5_4;
	float unkn5_5;
	uint unkn1_52;
	float unkn1_53;
	float unkn1_54;
	float unkn1_55;
	float unkn1_56;
	uint unkn1_57;
	uint unkn1_58;
	if (Version >= EfxVersion_RERT) { // end at: unkn1_60
		uint unkn1_59;
		uint unkn1_60;
	}

	float unkn1_61;
}TypeNodeBillboard_RE7<read="[TypeNodeBillboard]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(42);
	ExpressionAssignType posX_1;
	ExpressionAssignType posY_1;
	ExpressionAssignType posZ_1;
	ExpressionAssignType rangeX_1;
	ExpressionAssignType rangeY_1;
	ExpressionAssignType rangeZ_1;
	ExpressionAssignType color_1;
	ExpressionAssignType alpha_1;
	ExpressionAssignType posX_2;
	ExpressionAssignType posY_2;
	ExpressionAssignType posZ_2;
	ExpressionAssignType rangeX_2;
	ExpressionAssignType rangeY_2;
	ExpressionAssignType rangeZ_2;
	ExpressionAssignType color_2;
	ExpressionAssignType alpha_2;
	ExpressionAssignType posX_3;
	ExpressionAssignType posY_3;
	ExpressionAssignType posZ_3;
	ExpressionAssignType rangeX_3;
	ExpressionAssignType rangeY_3;
	ExpressionAssignType rangeZ_3;
	ExpressionAssignType color_3;
	ExpressionAssignType alpha_3;
	ExpressionAssignType posX_4;
	ExpressionAssignType posY_4;
	ExpressionAssignType posZ_4;
	ExpressionAssignType rangeX_4;
	ExpressionAssignType rangeY_4;
	ExpressionAssignType rangeZ_4;
	ExpressionAssignType color_4;
	ExpressionAssignType alpha_4;
	ExpressionAssignType unkn33;
	ExpressionAssignType unkn34;
	ExpressionAssignType sizeUnkn;
	ExpressionAssignType sizeUnknRand;
	ExpressionAssignType scaleUnkn;
	ExpressionAssignType scaleUnknRand;
	ExpressionAssignType speedUnkn;
	ExpressionAssignType speedUnknRand;
	ExpressionAssignType unkn41;
	ExpressionAssignType unkn42;
	EFXExpressionList expressions;
}TypeNodeBillboardExpression_DMC5<read="[TypeNodeBillboardExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version < EfxVersion_RE4) { // end at: instanceCount
		uint instanceCount;
	}

	uint unkn2;
	if (Version >= EfxVersion_RE8 && Version < EfxVersion_RE4) { // end at: unkn3
		uint unkn3;
	}

	Color color1;
	Color color2;
	float emission;
	float unkn5;
	float unkn6;
	float unkn7;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn3
		uint instanceCount_re4;
		uint re4_unkn2;
		if (Version == EfxVersion_RE4) { // end at: re4_unkn3
			uint re4_unkn3;
		}
	}

	float unkn8;
	float effectScale;
	float unkn10;
	float unkn11;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn5
		float sb_unkn0;
		float sb_unkn1;
		float sb_unkn2;
		float sb_unkn3;
		float sb_unkn4;
		float sb_unkn5;
	}

}TypeGpuBillboard_RE2<read="[TypeGpuBillboard]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(14);
	ExpressionAssignType colorR;
	ExpressionAssignType colorG;
	ExpressionAssignType colorB;
	ExpressionAssignType colorA;
	ExpressionAssignType colorRate;
	ExpressionAssignType alpha2;
	ExpressionAssignType particleSize;
	if (Version >= EfxVersion_RERT) { // end at: unkn13
		ExpressionAssignType particleSizeRand;
		ExpressionAssignType unkn9;
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
		ExpressionAssignType unkn13;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn14
		ExpressionAssignType unkn14;
	}

	EFXExpressionList expressions;
}TypeGpuBillboardExpression_DMC5<read="[TypeGpuBillboardExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(7);
	UndeterminedFieldType unkn1;
	EfxClipData clipData;
}TypeGpuBillboardClip_RE4<read="[TypeGpuBillboardClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color color1;
	Color color2;
	uint unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	if (Version >= EfxVersion_MHWilds) { // end at: unkn15
		float unkn14;
		UndeterminedFieldType unkn15;
	}

}TypeNoDraw_RE7<read="[TypeNoDraw]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(16);
	ExpressionAssignType color;
	if (Version > EfxVersion_RE3) { // end at: colorRand
		ExpressionAssignType colorRand;
	}

	ExpressionAssignType alpha;
	if (Version > EfxVersion_RE3) { // end at: alphaRand
		ExpressionAssignType alphaRand;
	}

	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	if (Version >= EfxVersion_MHWilds) { // end at: unkn18
		ExpressionAssignType unkn17;
		ExpressionAssignType unkn18;
	}

	EFXExpressionList expressions;
}TypeNoDrawExpression_RE3<read="[TypeNoDrawExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint cullingFlags;
	float unkn1;
	float unkn2;
	float unkn3;
	float cullingRadius1;
	float cullingRadius2;
	float cullingRadius3;
	float unkn7;
	float unkn8;
	float unkn9;
	if (Version >= EfxVersion_RE8) { // end at: cullingDistance
		float cullingDistance;
	}

}UnitCulling_DMC5<read="[UnitCulling]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(11);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType cullingRadius;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType cullingDistance;
	EFXExpressionList expressions;
}UnitCullingExpression_DD2<read="[UnitCullingExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unknBitFlag;
	Color color1;
	Color color2;
	float unkn1;
	if (Version == EfxVersion_DMC5) { // end at: unkn2_3
		UndeterminedFieldType unkn2_1;
		UndeterminedFieldType unkn2_2;
		UndeterminedFieldType unkn2_3;
	}

	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	if (Version == EfxVersion_DMC5) { // end at: unkn2_7
		float unkn2_7;
	}

	ByteSet flags;
	uint unkn2_9;
	uint unkn2_10;
	uint unkn2_11;
	float unkn2_12;
	float unkn2_13;
	float unkn2_14;
	float unkn2_15;
	float unkn2_16;
	float unkn2_17;
	UndeterminedFieldType unkn2_18;
	float unkn2_19;
	UndeterminedFieldType unkn2_20;
	float unkn2_21;
	UndeterminedFieldType unkn2_22;
	float unkn2_23;
	float unkn2_24;
	float unkn2_25;
	UndeterminedFieldType unkn2_26;
	float unkn2_27;
	UndeterminedFieldType unkn2_28;
	float unkn2_29;
	UndeterminedFieldType unkn2_30;
	float unkn2_31;
	UndeterminedFieldType unkn2_32;
	UndeterminedFieldType unkn2_33;
	float unkn2_34;
	UndeterminedFieldType unkn2_35;
	UndeterminedFieldType unkn2_36;
	UndeterminedFieldType unkn2_37;
	float unkn2_38;
	UndeterminedFieldType unkn2_39;
	float unkn2_40;
	float unkn2_41;
	float unkn2_42;
	float unkn2_43;
	float unkn2_44;
	float unkn2_45;
	float unkn2_46;
	float unkn2_47;
	float unkn2_48;
	uint unkn2_49;
	UndeterminedFieldType unkn2_50;
	UndeterminedFieldType unkn2_51;
	UndeterminedFieldType unkn2_52;
	UndeterminedFieldType unkn2_53;
	UndeterminedFieldType unkn2_54;
	uint unkn2_55;
	if (Version >= EfxVersion_DD2) { // end at: unkn2_72
		float dd2_unkn;
		float dd2_unkn2;
		float dd2_unkn3;
		float dd2_unkn4;
		float dd2_unkn5;
		float unkn2_64;
		float unkn2_65;
		float unkn2_66;
		float unkn2_67;
		float unkn2_68;
		float unkn2_69;
		float unkn2_70;
		float unkn2_71;
		float unkn2_71_1;
		float unkn2_71_2;
		float unkn2_71_3;
		uint unkn2_71_4;
		float unkn2_71_5;
		float unkn2_71_6;
		float unkn2_71_7;
		uint unkn2_71_8;
		float unkn2_71_9;
		float unkn2_72;
	}

	int len_boneName;
	wstring boneName;
}TypeLightning3DV1_RE7<read="[TypeLightning3DV1]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unknBitFlag;
	Color color0;
	Color color1;
	float unkn2_0;
	float unkn2_1;
	UndeterminedFieldType unkn2_2;
	float unkn2_3;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn1
		ByteSet sb_unkn1;
	}

	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	float unkn2_7;
	float unkn2_8;
	float unkn2_9;
	float unkn2_10;
	uint unkn2_11;
	uint unkn2_12;
	uint unkn2_13;
	uint unkn2_14;
	uint unkn2_15;
	float unkn2_16;
	float unkn2_17;
	float unkn2_18;
	float unkn2_19;
	float unkn2_20;
	float unkn2_21;
	float unkn2_22;
	float unkn2_23;
	float unkn2_24;
	float unkn2_25;
	float unkn2_26;
	float unkn2_27;
	float unkn2_28;
	float unkn2_29;
	float unkn2_30;
	float unkn2_31;
	float unkn2_32;
	float unkn2_33;
	float unkn2_34;
	float unkn2_35;
	float unkn2_36;
	float unkn2_37;
	float unkn2_38;
	float unkn2_39;
	float unkn2_40;
	float unkn2_41;
	float unkn2_42;
	float unkn2_43;
	float unkn2_44;
	float unkn2_45;
	float unkn2_46;
	float unkn2_47;
	uint unkn2_48;
	uint unkn2_49;
	float unkn2_50;
	float unkn2_51;
	float unkn2_52;
	float unkn2_53;
	float unkn2_54;
	float unkn2_55;
	if (Version >= EfxVersion_RE3) { // end at: unkn2_72
		float unkn2_56;
		float unkn2_57;
		float unkn2_58;
		float unkn2_59;
		float unkn2_60;
		float unkn2_61;
		float unkn2_62;
		float unkn2_63;
		if (Version >= EfxVersion_DD2) { // end at: dd2_unkn
			float dd2_unkn;
		}

		uint unkn2_64;
		uint unkn2_65;
		uint unkn2_66;
		float unkn2_67;
		float unkn2_68;
		float unkn2_69;
		uint unkn2_70;
		float unkn2_71;
		float unkn2_72;
	}

	int len_boneName;
	wstring boneName;
}TypeLightning3D_MHRiseSB<read="[TypeLightning3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(48);
	ExpressionAssignType color;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType terminalPosX;
	ExpressionAssignType terminalPosY;
	ExpressionAssignType terminalPosZ;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	ExpressionAssignType unkn22;
	ExpressionAssignType unkn23;
	ExpressionAssignType unkn24;
	ExpressionAssignType unkn25;
	ExpressionAssignType unkn26;
	ExpressionAssignType unkn27;
	ExpressionAssignType unkn28;
	if (Version >= EfxVersion_DD2) { // end at: unkn48
		ExpressionAssignType unkn29;
		ExpressionAssignType unkn30;
		ExpressionAssignType unkn31;
		ExpressionAssignType unkn32;
		ExpressionAssignType unkn33;
		ExpressionAssignType unkn34;
		ExpressionAssignType unkn35;
		ExpressionAssignType unkn36;
		ExpressionAssignType unkn37;
		ExpressionAssignType unkn38;
		ExpressionAssignType unkn39;
		ExpressionAssignType unkn40;
		ExpressionAssignType unkn41;
		ExpressionAssignType unkn42;
		ExpressionAssignType unkn43;
		ExpressionAssignType unkn44;
		ExpressionAssignType unkn45;
		ExpressionAssignType unkn46;
		ExpressionAssignType unkn47;
		ExpressionAssignType unkn48;
	}

	EFXExpressionList expressions;
}TypeLightning3DExpression_DD2<read="[TypeLightning3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unknBitFlag;
	Color color0;
	Color color1;
	float unkn2_0;
	float unkn2_1;
	float unkn2_2;
	UndeterminedFieldType unkn2_3;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	float unkn2_4;
	uint unkn2_5;
	uint unkn2_6;
	uint unkn2_7;
	uint unkn2_8;
	uint unkn2_9;
	float unkn2_10;
	float unkn2_11;
	float unkn2_12;
	float unkn2_13;
	float unkn2_14;
	UndeterminedFieldType unkn2_15;
	float unkn2_16;
	float unkn2_17;
	float unkn2_18;
	float unkn2_19;
	float unkn2_20;
	UndeterminedFieldType unkn2_21;
	float unkn2_22;
	UndeterminedFieldType unkn2_23;
	float unkn2_24;
	UndeterminedFieldType unkn2_25;
	float unkn2_26;
	UndeterminedFieldType unkn2_27;
	float unkn2_28;
	UndeterminedFieldType unkn2_29;
	float unkn2_30;
	UndeterminedFieldType unkn2_31;
	float unkn2_32;
	UndeterminedFieldType unkn2_33;
	float unkn2_34;
	float unkn2_35;
	UndeterminedFieldType unkn2_36;
	float unkn2_37;
	UndeterminedFieldType unkn2_38;
	float unkn2_39;
	UndeterminedFieldType unkn2_40;
	float unkn2_41;
	UndeterminedFieldType unkn2_42;
	uint dd2_extra1;
	UndeterminedFieldType unkn2_43;
	float unkn2_44;
	UndeterminedFieldType unkn2_45;
	float unkn2_46;
	UndeterminedFieldType unkn2_47;
	float unkn2_48;
	float unkn2_49;
	float unkn2_50;
	float unkn2_51;
	float unkn2_52;
	float unkn2_53;
	float unkn2_54;
	float unkn2_55;
	float unkn2_56;
	float unkn2_57;
	uint unkn2_58;
	UndeterminedFieldType unkn2_59;
	UndeterminedFieldType unkn2_60;
	float unkn2_61;
	float unkn2_62;
	UndeterminedFieldType unkn2_63;
	uint unkn2_64;
	float unkn2_65;
	float unkn2_66;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
	int len_uknString;
	wstring uknString;
}TypeLightning3DMaterial_DD2<read="[TypeLightning3DMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn1;
	uint ukn2;
	uint ukn3;
	float ukn4;
	uint ukn5;
	uint ukn6;
	UndeterminedFieldType ukn7;
	uint ukn8;
	uint subSize1;
	UndeterminedFieldType ukn9;
	uint ukn10;
	uint subSize2;
	if (subSize2 * 2 > 0) int sub1[subSize2 * 2] <optimize=false>;
	if (subSize1 / 4 > 0) int sub2[subSize1 / 4] <optimize=false>;
	if (subSize2 * 4 > 0) int sub3[subSize2 * 4] <optimize=false>;
	if (subSize2 > 0) int sub4[subSize2] <optimize=false>;
}TypeLightning3DMaterialClip_DD2<read="[TypeLightning3DMaterialClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(44);
	ExpressionAssignType terminalPosX;
	ExpressionAssignType terminalPosY;
	ExpressionAssignType terminalPosZ;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	ExpressionAssignType unkn22;
	ExpressionAssignType unkn23;
	ExpressionAssignType unkn24;
	ExpressionAssignType unkn25;
	ExpressionAssignType unkn26;
	ExpressionAssignType unkn27;
	ExpressionAssignType unkn28;
	ExpressionAssignType unkn29;
	ExpressionAssignType unkn30;
	ExpressionAssignType unkn31;
	ExpressionAssignType unkn32;
	ExpressionAssignType unkn33;
	ExpressionAssignType unkn34;
	ExpressionAssignType unkn35;
	ExpressionAssignType unkn36;
	ExpressionAssignType unkn37;
	ExpressionAssignType unkn38;
	ExpressionAssignType unkn39;
	ExpressionAssignType unkn40;
	ExpressionAssignType unkn41;
	ExpressionAssignType unkn42;
	ExpressionAssignType unkn43;
	EFXExpressionList expressions;
	ExpressionAssignType unkn44;
	uint materialExpressionCount;
	EFXMaterialExpressionList materialExpressions;
}TypeLightning3DMaterialExpression_DD2<read="[TypeLightning3DMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color color1;
	Color color2;
	float unkn1;
	UndeterminedFieldType unkn2;
	UndeterminedFieldType unkn3;
	float unkn4;
	float unkn5;
	uint unkn6;
	uint unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	float unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	float unkn21;
	UndeterminedFieldType unkn22;
	float unkn23;
	UndeterminedFieldType unkn24;
	UndeterminedFieldType unkn25;
	float unkn26;
	UndeterminedFieldType unkn27;
	UndeterminedFieldType unkn28;
	float unkn29;
	UndeterminedFieldType unkn30;
	float unkn31;
	float unkn32;
	float unkn33;
	UndeterminedFieldType unkn34;
	float unkn35;
	float unkn36;
	float unkn37;
	uint unkn38;
	uint unkn39;
	float unkn40;
	float unkn41;
	uint unkn42;
	float unkn2_1;
	float unkn2_2;
	float unkn2_3;
	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	uint unkn2_7;
	uint unkn2_8;
	uint unkn2_9;
	uint unkn2_10;
	uint unkn2_11;
	uint unkn2_12;
	uint unkn2_13;
	float unkn3_1;
	float unkn3_2;
	float unkn3_3;
	float unkn3_4;
	float unkn3_5;
	float unkn3_6;
	uint unkn3_7;
	uint unkn3_8;
	uint unkn3_9;
	uint unkn3_10;
	uint unkn3_11;
	uint unkn3_12;
	uint unkn3_13;
	float unkn4_1;
	float unkn4_2;
	float unkn4_3;
	float unkn4_4;
	float unkn4_5;
	float unkn4_6;
	uint unkn4_7;
	uint unkn4_8;
	uint unkn4_9;
	uint unkn4_10;
	uint unkn4_11;
	uint unkn4_12;
	uint unkn4_13;
	uint str1Len;
	uint str2Len;
	uint str3Len;
	wstring str1;
	wstring str2;
	wstring str3;
}TypeGpuLightning3D_DD2<read="[TypeGpuLightning3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint data[46] <optimize=false>;
}TypeLightningExpensive_MHWilds<read="[TypeLightningExpensive]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	float unkn1;
	UndeterminedFieldType unkn2;
	uint unkn3;
	UndeterminedFieldType unkn4;
	float unkn5;
	UndeterminedFieldType unkn6;
}PtLightningBranchAction_MHWilds<read="[PtLightningBranchAction]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn1;
	uint overriddenHashCount;
	Color color1;
	Color color2;
	float unkn2;
	if (Version >= EfxVersion_RE2) { // end at: frameCount
		uint frameCount;
	}

	uint startingFrameMin;
	uint startingFrameMax;
	float animationSpeedMin;
	float animationSpeedMax;
	uint animationMode;
	uint unkn13;
	uint unkn14;
	float rotationX;
	float rotationXVariation;
	float rotationY;
	float rotationYVariation;
	float rotationZ;
	float rotationZVariation;
	float scaleX;
	float scaleXVariation;
	float scaleY;
	float scaleYVariation;
	float scaleZ;
	float scaleZVariation;
	float scaleMultiplier;
	float scaleMultiplierVariation;
	uint ukn3;
	if (Version >= EfxVersion_RE2) { // end at: texCount
		uint ukn4;
		uint texCount;
	}

	int meshPathLength;
	int mdfPathLength;
	uint texPathBlockLength;
	if (overriddenHashCount > 0) MdfProperty properties[overriddenHashCount] <optimize=false>;
	wstring meshPath;
	wstring mdfPath;
	if (Version >= EfxVersion_RE2) { // end at: texPaths
		if (texCount > 0) struct { wstring str; } texPaths[texCount] <read=str,optimize=false>;
	}

}TypeMesh_RE7<read="[TypeMesh]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn1;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn0
		uint re4_unkn0;
	}

	Color color1;
	Color color2;
	float unkn4;
	Color color3;
	float unkn6;
	uint frameCount;
	uint startingFrameMin;
	uint startingFrameMax;
	float animationSpeedMin;
	float animationSpeedMax;
	float acceleration;
	float accelerationRange;
	uint animationMode;
	uint unkn13;
	uint unkn14;
	float rotationX;
	float rotationXVariation;
	float rotationY;
	float rotationYVariation;
	float rotationZ;
	float rotationZVariation;
	float scaleX;
	float scaleXVariation;
	float scaleY;
	float scaleYVariation;
	float scaleZ;
	float scaleZVariation;
	float scaleMultiplier;
	float scaleMultiplierVariation;
	uint unkn23;
	uint unkn24;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		uint re4_unkn1;
	}

	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn1
		uint mhws_unkn1;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		float dd2_unkn1;
	}

	int texCount;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
		uint dd2_unkn2;
	}

	int len_meshPath;
	wstring meshPath;
	int len_unknPath;
	wstring unknPath;
	int len_mdfPath;
	wstring mdfPath;
	int propertiesDataSize;
	if (propertiesDataSize / 32 > 0) MdfProperty properties[propertiesDataSize / 32] <optimize=false>;
	int texPathBlockLength;
	if (texCount > 0) struct { wstring str; } texPaths[texCount] <read=str,optimize=false>;
}TypeMeshV2_RE8<read="[TypeMeshV2]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(13);
	if (Version <= EfxVersion_DMC5) { // end at: mdfPropertyCount
		int mdfPropertyCount;
	}

	if (Version >= EfxVersion_RE3 && Version <= EfxVersion_RERT) { // end at: mdfPropertyCountDouble
		int mdfPropertyCountDouble;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn1
		uint unkn1;
	}

	EfxMaterialClipData clipData;
}TypeMeshClip_RE3<read="[TypeMeshClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version >= EfxVersion_RE2 && Version < EfxVersion_RE4) { // end at: matExpressionSize
		int matExpressionCount;
		uint matExpressionSize;
	}

	if (Version >= EfxVersion_RE3 && Version < EfxVersion_RE4) { // end at: indicesCount
		int indicesCount;
	}

	BitSet expressionBits(25);
	ExpressionAssignType color1;
	ExpressionAssignType color1Rand;
	ExpressionAssignType alpha;
	ExpressionAssignType alphaRand;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	if (Version > EfxVersion_RE3) { // end at: unkn22
		ExpressionAssignType unkn22;
	}

	if (Version >= EfxVersion_RE8) { // end at: unkn23
		ExpressionAssignType unkn23;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn25
		ExpressionAssignType unkn24;
		ExpressionAssignType unkn25;
	}

	EFXExpressionList expressions;
	if (Version >= EfxVersion_RE4) { // end at: materialExpressions
		int materialExpressionsCount;
		EFXMaterialExpressionList materialExpressions;
	}

	if (Version >= EfxVersion_RE2 && Version < EfxVersion_RE4) { // end at: materialExpressionsList
		if (matExpressionCount > 0) EFXMaterialExpression materialExpressionsList[matExpressionCount] <optimize=false>;
	}

	if (Version >= EfxVersion_RE3 && Version < EfxVersion_RE4) { // end at: materialIndices
		if (indicesCount > 0) uint materialIndices[indicesCount] <optimize=false>;
	}

}TypeMeshExpression_RE7<read="[TypeMeshExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	ubyte unkn0_1;
	ubyte unkn0_2;
	ubyte unkn0_3;
	ubyte unkn0_4;
	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn1
		float mhws_unkn1;
	}

	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn2
		float mhws_unkn2;
	}

	uint unkn1;
	uint unkn2;
	if (Version < EfxVersion_DD2) { // end at: unkn3
		uint unkn3;
	}

	Color color0;
	Color color1;
	float unkn6;
	uint unkn7;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn2
		uint re4_unkn1;
		uint re4_unkn2;
	}

	if (Version == EfxVersion_RE8) { // end at: re8_unkn1
		float re8_unkn1;
	}

	float unkn10;
	float unkn11;
	float unkn12;
	if (Version >= EfxVersion_RE4) { // end at: unkn16
		float unkn13;
		uint unkn14;
		uint unkn15;
		uint unkn16;
	}

	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	float unkn21;
	float unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	float unkn26;
	if (Version >= EfxVersion_RE4) { // end at: unkn31
		float unkn27;
		float unkn28;
		float unkn29;
		float unkn30;
		uint unkn31;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn
		float dd2_unkn;
	}

	int texCount;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
		uint dd2_unkn2;
	}

	int len_meshPath;
	wstring meshPath;
	int len_unknPath;
	wstring unknPath;
	int len_mdfPath;
	wstring mdfPath;
	uint unknDataSize;
	if (unknDataSize > 0) ubyte unknData[unknDataSize] <optimize=false>;
	int texBlockLength;
	if (texCount > 0) struct { wstring str; } texturePaths[texCount] <read=str,optimize=false>;
}TypeGpuMesh_RE8<read="[TypeGpuMesh]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(1);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeGpuMeshClip_DD2<read="[TypeGpuMeshClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(19);
	ExpressionAssignType color;
	ExpressionAssignType colorRand;
	ExpressionAssignType alpha;
	ExpressionAssignType alphaRate;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType size;
	ExpressionAssignType sizeRand;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	EFXExpressionList expressions;
	if (Version >= EfxVersion_RERT) { // end at: materialExpressions
		uint materialPropertyCount;
		EFXMaterialExpressionList materialExpressions;
	}

}TypeGpuMeshExpression_RE8<read="[TypeGpuMeshExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	uint unkn1;
	uint unkn2;
	if (Version < EfxVersion_DD2) { // end at: unkn3
		uint unkn3;
	}

	Color color0;
	Color color1;
	float unkn4;
	uint unkn5;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		uint dd2_unkn1;
	}

	UndeterminedFieldType unkn6;
	UndeterminedFieldType unkn7;
	float unkn8;
	UndeterminedFieldType unkn9;
	UndeterminedFieldType unkn10;
	UndeterminedFieldType unkn11;
	float unkn12;
	UndeterminedFieldType unkn13;
	float unkn14;
	UndeterminedFieldType unkn15;
	float unkn16;
	UndeterminedFieldType unkn17;
	float unkn18;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
		uint dd2_unkn2;
	}

	UndeterminedFieldType unkn19;
	UndeterminedFieldType unkn20;
	UndeterminedFieldType unkn21;
	uint unkn22_count;
	UndeterminedFieldType unkn23;
	uint unkn24;
	UndeterminedFieldType unkn25;
	UndeterminedFieldType unkn26;
	UndeterminedFieldType unkn27;
	UndeterminedFieldType unkn28;
	UndeterminedFieldType unkn29;
	float unkn30;
	float unkn31;
	UndeterminedFieldType unkn32;
	UndeterminedFieldType unkn33;
	UndeterminedFieldType unkn34;
	UndeterminedFieldType unkn35;
	uint unkn36;
	uint unkn37;
	UndeterminedFieldType unkn38;
	float unkn39;
	float unkn40;
	uint unkn41;
	UndeterminedFieldType unkn42;
	int len_meshPath;
	wstring meshPath;
	int len_uknPath;
	wstring uknPath;
	int len_mdfPath;
	wstring mdfPath;
	uint dataSize;
	uint texBlockLength;
}TypeGpuMeshTrail_RE8<read="[TypeGpuMeshTrail]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unknFlags;
	uint unkn1;
	uint unkn2;
	Color color1;
	Color color2;
	float unkn5;
	uint unkn6;
	uint unkn7;
	uint unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	UndeterminedFieldType unkn12;
	uint unkn13;
	UndeterminedFieldType unkn14;
	uint unkn15;
	UndeterminedFieldType unkn16;
	UndeterminedFieldType unkn17;
	UndeterminedFieldType unkn18;
	UndeterminedFieldType unkn19;
	UndeterminedFieldType unkn20;
	UndeterminedFieldType unkn21;
	float unkn22;
	UndeterminedFieldType unkn23;
	float unkn24;
	UndeterminedFieldType unkn25;
	float unkn26;
	UndeterminedFieldType unkn27;
	float unkn28;
	UndeterminedFieldType unkn29;
	uint unkn30;
	float unkn31;
	uint texCount;
	UndeterminedFieldType unkn32;
	uint unkn33;
	uint unkn34;
	uint unkn35;
	float unkn36;
	uint unkn37;
	uint unkn38;
	uint unkn39;
	float unkn40;
	float unkn41;
	float unkn42;
	float unkn43;
	float unkn44;
	UndeterminedFieldType unkn45;
	UndeterminedFieldType unkn46;
	float unkn47;
	float unkn48;
	float unkn49;
	float unkn50;
	float unkn51;
	float unkn52;
	float unkn53;
	UndeterminedFieldType unkn54;
	float unkn55;
	UndeterminedFieldType unkn56;
	int len_meshPath;
	wstring meshPath;
	int len_unkPath;
	wstring unkPath;
	int len_mdfPath;
	wstring mdfPath;
	int propertiesDataSize;
	if (propertiesDataSize / 32 > 0) MdfProperty properties[propertiesDataSize / 32] <optimize=false>;
	uint texBlockLength;
	if (texCount > 0) struct { wstring str; } texPaths[texCount] <read=str,optimize=false>;
}TypeGpuMeshTrailV2_DD2<read="[TypeGpuMeshTrailV2]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(23);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeGpuMeshTrailClip_DD2<read="[TypeGpuMeshTrailClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(21);
	ExpressionAssignType unkn1;
	ExpressionAssignType color1R;
	ExpressionAssignType color1G;
	ExpressionAssignType color1B;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	EFXExpressionList expressions;
	int materialExpressionCount;
	EFXMaterialExpressionList materialExpressions;
}TypeGpuMeshTrailExpression_DD2<read="[TypeGpuMeshTrailExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint mFlags;
	Color color0;
	Color color1;
	float unkn2;
	float unkn3;
	float unkn4_0;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		float re4_unkn0;
		uint re4_unkn1;
	}

	uint unkn4_1;
	float unkn4_3;
	float unkn4_4;
	float unkn4_5;
	float unkn4_6;
	float unkn4_7;
	float unkn4_8;
	float unkn4_9;
	float unkn4_10;
	float unkn4_11;
	float unkn4_12;
	float unkn4_13;
	float unkn4_14;
	float unkn4_15;
	float unkn4_16;
	if (Version < EfxVersion_RE4) { // end at: unkn4_17
		float unkn4_17;
	}

	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	if (Version >= EfxVersion_RE4) { // end at: re4_unkn2
		uint re4_unkn2;
	}

}TypePolygon_RE7<read="[TypePolygon]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(9);
	uint unkn1;
	EfxClipData clipData;
}TypePolygonClip_DMC5<read="[TypePolygonClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(19);
	ExpressionAssignType color;
	ExpressionAssignType alpha;
	ExpressionAssignType emissive;
	ExpressionAssignType colorStrength;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType scale;
	ExpressionAssignType unkn13;
	ExpressionAssignType size;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	if (Version >= EfxVersion_RE4) { // end at: unkn19
		ExpressionAssignType unkn19;
	}

	EFXExpressionList expressions;
}TypePolygonExpression_RE7<read="[TypePolygonExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color unkn2;
	Color unkn3;
	int unkn4;
	float unkn5;
	UndeterminedFieldType unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	UndeterminedFieldType unkn10;
	float unkn11;
	UndeterminedFieldType unkn12;
	float unkn13;
	UndeterminedFieldType unkn14;
	float unkn15;
	UndeterminedFieldType unkn16;
	UndeterminedFieldType unkn17;
	float unkn18;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypePolygonMaterial_RE8<read="[TypePolygonMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color1;
	Color color2;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn
		uint re4_unkn;
	}

	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	uint unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	uint unkn12;
	uint unkn13;
	uint unkn14;
	uint unkn15;
	Color color3;
	Color color4;
	Color color5;
	float unkn19;
	float unkn20;
}TypePolygonTrail_RE2<read="[TypePolygonTrail]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color unkn1;
	Color unkn2;
	uint unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
	uint unkn7;
	uint unkn8;
	uint unkn9;
	uint unkn10;
	Color unkn12;
	Color unkn13;
	Color unkn14;
	float unkn15;
	float unkn16;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypePolygonTrailMaterial_DD2<read="[TypePolygonTrailMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(7);
	ExpressionAssignType color;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	EFXExpressionList expressions;
	ExpressionAssignType unkn7;
	int materialExpressionCount;
	EFXMaterialExpressionList materialExpressions;
}TypePolygonTrailMaterialExpression_DD2<read="[TypePolygonTrailMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	if (Version == EfxVersion_RE3 || Version == EfxVersion_RE8 || Version == EfxVersion_RERT) { // end at: unkn1
		uint unkn1;
	}

	if (Version == EfxVersion_RE8 || Version == EfxVersion_RERT) { // end at: unkn2
		uint unkn2;
	}

	Color color0;
	Color color1;
	float unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	if (Version >= EfxVersion_RE4) { // end at: re_unkn1
		uint re_unkn1;
	}

	float unkn8;
	if (Version == EfxVersion_RE4) { // end at: re_unkn2
		uint re_unkn2;
	}

	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	float unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		float dd2_unkn1;
	}

	if (Version >= EfxVersion_RE4) { // end at: re_unkn3
		uint re_unkn3;
	}

}TypeGpuPolygon_RE3<read="[TypeGpuPolygon]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(19);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	ExpressionAssignType unkn18;
	ExpressionAssignType unkn19;
	EFXExpressionList expressions;
}TypeGpuPolygonExpression_DD2<read="[TypeGpuPolygonExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	Color color0;
	Color color1;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	if (Version >= EfxVersion_RE4) { // end at: unkn1_7
		uint unkn1_7;
	}

	float unkn1_8;
	float unkn1_9;
	float unkn1_10;
	float unkn1_11;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	float unkn1_12;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		float dd2_unkn1;
	}

	if (Version >= EfxVersion_RE2) { // end at: unkn1_13
		uint unkn1_13;
	}

	float unkn1_14;
	float unkn1_15;
	uint unkn1_16;
	float unkn1_17;
	float unkn1_18;
	float unkn1_19;
	float unkn1_20;
	float unkn1_21;
	float unkn1_22;
	float unkn1_23;
	float unkn1_24;
	float unkn1_25;
	float unkn1_26;
	if (Version >= EfxVersion_RE2) { // end at: sb_unkn2
		Color color2_1;
		Color color2_2;
		Color color2_3;
		float unkn1_29;
		float unkn1_30;
		float unkn1_31;
		float unkn1_32;
		float unkn1_33;
		float unkn1_34;
		float unkn1_35;
		if (Version >= EfxVersion_RE8) { // end at: sb_unkn2
			float sb_unkn1;
			float sb_unkn2;
		}
	}

}TypeRibbonLength_RE7<read="[TypeRibbonLength]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(19);
	ExpressionAssignType color;
	ExpressionAssignType alpha;
	ExpressionAssignType size1;
	ExpressionAssignType size2;
	ExpressionAssignType emissive;
	if (Version >= EfxVersion_RE2) { // end at: size
		ExpressionAssignType unkn6;
		ExpressionAssignType size;
	}

	if (Version >= EfxVersion_RE8) { // end at: unkn9
		ExpressionAssignType unkn8;
		ExpressionAssignType unkn9;
	}

	if (Version > EfxVersion_RERT) { // end at: unkn15
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
		ExpressionAssignType unkn13;
		ExpressionAssignType unkn14;
		ExpressionAssignType unkn15;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn19
		ExpressionAssignType unkn16;
		ExpressionAssignType unkn17;
		ExpressionAssignType unkn18;
		ExpressionAssignType unkn19;
	}

	EFXExpressionList expressions;
}TypeRibbonLengthExpression_RE7<read="[TypeRibbonLengthExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	UndeterminedFieldType unkn1;
	Color color1;
	Color color2;
	float unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	float unkn7;
	uint unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn1
		float dd2_unkn1;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn2
		float dd2_unkn2;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn3
		float dd2_unkn3;
	}

	uint unkn13;
	float unkn14;
	float unkn15;
	int unkn16;
	float unkn17;
	float unkn18;
	UndeterminedFieldType unkn19;
	UndeterminedFieldType unkn20;
	float unkn21;
	float unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	float unkn26;
	Color color3;
	Color color4;
	Color color5;
	float unkn30;
	float unkn31;
	float unkn32;
	float unkn33;
	float unkn34;
	float unkn35;
	float unkn36;
	float unkn37;
	UndeterminedFieldType unkn38;
	uint unkn39;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypeRibbonLengthMaterial_RE8<read="[TypeRibbonLengthMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(15);
	ExpressionAssignType color;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	EFXExpressionList expressions;
	ExpressionAssignType unkn15;
	int materialExpressionCount;
	EFXMaterialExpressionList materialExpressions;
}TypeRibbonLengthMaterialExpression_DD2<read="[TypeRibbonLengthMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color0;
	Color color1;
	float unkn2_0;
	UndeterminedFieldType null2_1;
	UndeterminedFieldType null2_2;
	float unkn2_3;
	UndeterminedFieldType null2_4;
	float unkn2_5;
	UndeterminedFieldType null2_6;
	float unkn2_7;
	UndeterminedFieldType null2_8;
	float unkn2_9;
	float unkn2_10;
	uint unkn2_11;
	float unkn2_12;
	UndeterminedFieldType null2_13;
	float unkn2_14;
	UndeterminedFieldType null2_15;
	float unkn2_16;
	UndeterminedFieldType null2_17;
	uint unkn2_18;
	UndeterminedFieldType null2_19;
	UndeterminedFieldType null2_20;
	float unkn2_21;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn1
		float sb_unkn1;
	}

	UndeterminedFieldType null2_22;
	UndeterminedFieldType null2_23;
	UndeterminedFieldType null2_24;
}TypeRibbonChainV1_RE7<read="[TypeRibbonChainV1]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color1;
	Color color2;
	float unkn2_0;
	float unkn2_1;
	float unkn2_2;
	float unkn2_3;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1_4
		ubyte re4_unkn1_1;
		ubyte re4_unkn1_2;
		ubyte re4_unkn1_3;
		ubyte re4_unkn1_4;
	}

	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	float unkn2_7;
	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn1
		uint mhws_unkn1;
	}

	float unkn2_8;
	if (Version >= EfxVersion_RERT) { // end at: rert_unkn1
		float rert_unkn1;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn0
		float dd2_unkn0;
	}

	ByteSet unkn2_9_1;
	if (Version < EfxVersion_MHWilds) { // end at: unkn2_10
		float unkn2_10;
	}

	float unkn2_11;
	float unkn2_12;
	float unkn2_13;
	float unkn2_14;
	float unkn2_15;
	float unkn2_16;
	float unkn2_17;
	uint unkn2_18;
	float unkn2_19;
	float unkn2_20;
	float unkn2_21;
	float rert_unkn0;
	if (Version == EfxVersion_RERT) { // end at: sb_unkn1
		float sb_unkn1;
	}

	if (Version == EfxVersion_RERT) { // end at: sb_unkn2
		float sb_unkn2;
	}

	float unkn2_22;
	float unkn2_23;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn2_hash
		uint re4_unkn2_hash;
	}

	float unkn2_24;
	float unkn2_25;
	float unkn2_26;
	float unkn2_27;
	float unkn2_28;
	float unkn2_29;
	float unkn2_30;
	float unkn2_31;
	if (Version > EfxVersion_RERT) { // end at: unkn2_32
		float unkn2_32;
	}

	Color unkn2_33;
	Color unkn2_34;
	Color unkn2_35;
	float unkn2_36;
	float unkn2_37;
	float unkn2_38;
	float unkn2_39;
	float unkn2_40;
	float unkn2_41;
	float unkn2_42;
	float unkn2_43;
	float unkn2_44;
	float unkn2_45;
	float unkn2_46;
	float unkn2_47;
	if (Version >= EfxVersion_RE3) { // end at: unkn2_49
		float unkn2_48;
		float unkn2_49;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn7
		float dd2_unkn1;
		float dd2_unkn2;
		float dd2_unkn3;
		float dd2_unkn4;
		float dd2_unkn5;
		float dd2_unkn6;
		float dd2_unkn7;
	}

	if (Version >= EfxVersion_MHWilds) { // end at: mhws_unkn2
		float mhws_unkn2;
	}

}TypeRibbonChain_RE2<read="[TypeRibbonChain]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(17);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	if (Version >= EfxVersion_RE8) { // end at: unkn9
		ExpressionAssignType unkn8;
		ExpressionAssignType unkn9;
	}

	if (Version >= EfxVersion_DD2) { // end at: unkn17
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
		ExpressionAssignType unkn13;
		ExpressionAssignType unkn14;
		ExpressionAssignType unkn15;
		ExpressionAssignType unkn16;
		ExpressionAssignType unkn17;
	}

	EFXExpressionList expressions;
}TypeRibbonChainExpression_RE2<read="[TypeRibbonChainExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color color1;
	Color color2;
	float unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	uint unkn7;
	float unkn8;
	UndeterminedFieldType unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	uint unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	float color3;
	float color4;
	float color5;
	uint unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	UndeterminedFieldType unkn26;
	float unkn27;
	UndeterminedFieldType unkn28;
	float unkn29;
	UndeterminedFieldType unkn30;
	UndeterminedFieldType unkn31;
	UndeterminedFieldType unkn32;
	float unkn33;
	UndeterminedFieldType unkn34;
	UndeterminedFieldType unkn35;
	UndeterminedFieldType unkn36;
	float unkn37;
	UndeterminedFieldType unkn38;
	Color unkn39;
	Color unkn40;
	Color unkn41;
	float unkn42;
	float unkn43;
	float unkn44;
	float unkn45;
	float unkn46;
	float unkn47;
	float unkn48;
	float unkn49;
	float unkn50;
	float unkn51;
	float unkn52;
	float unkn53;
	float unkn54;
	float unkn55;
	UndeterminedFieldType unkn56;
	UndeterminedFieldType unkn57;
	UndeterminedFieldType unkn58;
	UndeterminedFieldType unkn59;
	float unkn60;
	UndeterminedFieldType unkn61;
	float unkn62;
	uint unkn63;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypeRibbonChainMaterial_DD2<read="[TypeRibbonChainMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(6);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeRibbonChainMaterialClip_DD2<read="[TypeRibbonChainMaterialClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	uint unkn1_1;
	uint unkn1_2;
	uint unkn1_3;
	uint unkn1_4;
	uint unkn1_5;
	uint unkn1_6;
	uint unkn1_7;
	uint unkn1_8;
	uint unkn1_9;
	uint unkn1_10;
	uint unkn1_12;
	uint unkn1_13;
	uint unkn1_14;
	uint unkn1_15;
	uint unkn1_16;
	uint unkn1_17;
	uint unkn1_18;
	EFXMaterialExpressionList materialExpressions;
}TypeRibbonChainMaterialExpression_DD2<read="[TypeRibbonChainMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color0;
	Color color1;
	float unkn2_0;
	float unkn2_1;
	float unkn2_2;
	float unkn2_3;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn0
		uint re4_unkn0;
	}

	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	float unkn2_7;
	float unkn2_8;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn0
		float dd2_unkn0;
	}

	uint unkn2_9;
	float unkn2_10;
	float unkn2_11;
	uint unkn2_12;
	uint unkn2_13;
	uint unkn2_14;
	float unkn2_15;
	int unkn2_16;
	int unkn2_17;
	int unkn2_18;
	float unkn2_19;
	float unkn2_20;
	float unkn2_21;
	float unkn2_22;
	float unkn2_23;
	float unkn2_24;
	float unkn2_25;
	if (Version >= EfxVersion_RE3) { // end at: unkn2_27
		float unkn2_26;
		float unkn2_27;
	}

}TypeRibbonFixEnd_RE4<read="[TypeRibbonFixEnd]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(17);
	ExpressionAssignType color;
	ExpressionAssignType alpha;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	if (Version >= EfxVersion_RE8) { // end at: unkn9
		ExpressionAssignType unkn8;
		ExpressionAssignType unkn9;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn17
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType color2;
		ExpressionAssignType unkn13;
		ExpressionAssignType color3;
		ExpressionAssignType unkn15;
		ExpressionAssignType unkn16;
		ExpressionAssignType unkn17;
	}

	EFXExpressionList expressions;
}TypeRibbonFixEndExpression_RE8<read="[TypeRibbonFixEndExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color color1;
	Color color2;
	float unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	uint unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	uint unkn15;
	float unkn16;
	float unkn17;
	uint unkn18;
	uint unkn19;
	uint unkn20;
	float unkn21;
	Color unkn39;
	Color unkn40;
	Color unkn41;
	float unkn42;
	float unkn43;
	float unkn44;
	float unkn45;
	float unkn46;
	float unkn47;
	float unkn48;
	float unkn49;
	float unkn50;
	uint unkn51;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypeRibbonFixEndMaterial_DD2<read="[TypeRibbonFixEndMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(1);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeRibbonFixEndMaterialClip_DD2<read="[TypeRibbonFixEndMaterialClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	uint unkn1_1;
	uint unkn1_2;
	uint unkn1_3;
	uint unkn1_4;
	uint unkn1_5;
	uint unkn1_6;
	uint unkn1_7;
	uint unkn1_8;
	uint unkn1_9;
	uint unkn1_10;
	uint unkn1_12;
	uint unkn1_13;
	uint unkn1_14;
	uint unkn1_15;
	uint unkn1_16;
	uint unkn1_17;
	uint unkn1_18;
	EFXMaterialExpressionList materialExpressions;
}TypeRibbonFixEndMaterialExpression_DD2<read="[TypeRibbonFixEndMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint emission;
	Color color0;
	Color color1;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	if (Version >= EfxVersion_RE4) { // end at: unkn8
		uint unkn8;
	}

	float unkn9;
	float unkn10;
	float trailWidth;
	float unkn12;
	float sb_unkn0;
	if (Version >= EfxVersion_RE2 && Version <= EfxVersion_RE8) { // end at: unkn14_re2
		uint unkn14_re2;
	}

	if (Version < EfxVersion_RE2 || Version > EfxVersion_RE8) { // end at: unkn14
		float unkn14;
	}

	if (Version >= EfxVersion_DD2) { // end at: dd2__unkn0
		float dd2__unkn0;
	}

	if (Version >= EfxVersion_RERT) { // end at: rert_unkn0
		int rert_unkn0;
	}

	float unkn15;
	if (Version >= EfxVersion_RE8) { // end at: rert_unkn1
		float rert_unkn1;
	}

	uint trailLength;
	if (Version >= EfxVersion_RE3) { // end at: something
		uint something;
	}

	if (Version == EfxVersion_RE7) { // end at: unkn17
		float unkn17;
	}

	int ukn18;
	if (Version >= EfxVersion_RE2) { // end at: unkn26
		Color color2;
		Color unkn19;
		Color unkn20;
		float unkn21;
		float unkn22;
		float unkn23;
		float unkn24;
		float unkn25;
		float unkn26;
	}

	if (Version >= EfxVersion_RE2) { // end at: re2_unkn
		float re2_unkn;
	}

	if (Version >= EfxVersion_RE3) { // end at: re3_unkn2
		float re3_unkn1;
		float re3_unkn2;
	}

	if (Version >= EfxVersion_RE8) { // end at: rert_unkn3
		float rert_unkn2;
		UndeterminedFieldType rert_unkn3;
	}

}TypeRibbonFollow_RE7<read="[TypeRibbonFollow]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(17);
	ExpressionAssignType color;
	ExpressionAssignType unkn2;
	ExpressionAssignType scale;
	ExpressionAssignType scaleRand;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	if (Version >= EfxVersion_DD2) { // end at: unkn17
		ExpressionAssignType unkn8;
		ExpressionAssignType unkn9;
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
		ExpressionAssignType unkn13;
		ExpressionAssignType unkn14;
		ExpressionAssignType unkn15;
		ExpressionAssignType unkn16;
		ExpressionAssignType unkn17;
	}

	EFXExpressionList expressions;
}TypeRibbonFollowExpression_DMC5<read="[TypeRibbonFollowExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	Color color1;
	Color color2;
	float unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	uint unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	uint unkn15;
	float unkn16;
	float unkn17;
	uint unkn18;
	uint unkn19;
	UndeterminedFieldType unkn20;
	Color color3;
	Color color4;
	Color color5;
	float unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	float unkn26;
	float unkn27;
	float unkn28;
	float unkn29;
	float unkn30;
	float unkn31;
	UndeterminedFieldType unkn32;
	uint unkn33;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypeRibbonFollowMaterial_DD2<read="[TypeRibbonFollowMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(10);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeRibbonFollowMaterialClip_DD2<read="[TypeRibbonFollowMaterialClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(15);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType color1;
	ExpressionAssignType unkn10;
	ExpressionAssignType color2;
	ExpressionAssignType unkn12;
	ExpressionAssignType color3;
	ExpressionAssignType unkn14;
	EFXExpressionList expressions;
	ExpressionAssignType unkn15;
	uint materialExpressionCount;
	EFXMaterialExpressionList materialExpressions;
}TypeRibbonFollowMaterialExpression_DD2<read="[TypeRibbonFollowMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	Color color0;
	Color color1;
	float unkn2_0;
	uint unkn2_1;
	uint unkn2_2;
	float unkn2_3;
	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	float unkn2_7;
	if (Version >= EfxVersion_DD2) { // end at: dd2_unkn
		float dd2_unkn;
	}

	uint unkn2_8;
	if (Version >= EfxVersion_RE3) { // end at: unkn2_10
		float unkn2_9;
		float unkn2_10;
	}

}TypeRibbonLightweight_DMC5<read="[TypeRibbonLightweight]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn1;
	Color color1;
	Color color2;
	float ukn5;
	uint ukn6;
	uint ukn7;
	float ukn8;
	uint ukn9;
	float ukn10;
	float ukn11;
	float ukn12;
	float ukn14;
	float ukn15;
	float ukn16;
	float ukn17;
	uint color3;
	uint color4;
	uint color5;
	uint ukn18;
	float ukn19;
	float ukn20;
	float ukn21;
	Color ukn22;
	Color ukn23;
	Color ukn24;
	float ukn25;
	float ukn26;
	float ukn27;
	float ukn28;
	float ukn29;
	float ukn30;
	float ukn31;
	float ukn32;
	float ukn33;
}TypeRibbonParticle_DD2<read="[TypeRibbonParticle]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	if (Version >= EfxVersion_RE4) { // end at: unkn1
		uint unkn1;
	}

	Color color0;
	Color color1;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	if (Version >= EfxVersion_RERT) { // end at: unkn10
		float unkn10;
	}

	uint unkn11;
	uint unkn12;
}TypeRibbonTrail_RE7<read="[TypeRibbonTrail]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(17);
	ExpressionAssignType color;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType unkn15;
	ExpressionAssignType unkn16;
	ExpressionAssignType unkn17;
	EFXExpressionList expressions;
}TypeRibbonParticleExpression_DD2<read="[TypeRibbonParticleExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	if (Version < EfxVersion_RE4) { // end at: unkn4
		uint unkn1;
		uint unkn2;
		uint unkn3;
		if (Version >= EfxVersion_RE8) { // end at: unkn4
			uint unkn4;
		}
	}

	Color color0;
	Color color1;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn5
		uint re4_unkn1;
		uint re4_unkn2;
		uint re4_unkn3;
		uint re4_unkn4;
		if (Version == EfxVersion_RE4) { // end at: re4_unkn5
			uint re4_unkn5;
		}
	}

	float unkn11;
	float unkn12;
	float unkn13;
	if (Version >= EfxVersion_RE3) { // end at: unkn14
		float unkn14;
	}

}TypeGpuRibbonFollow_RE2<read="[TypeGpuRibbonFollow]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(9);
	ExpressionAssignType color;
	ExpressionAssignType alpha;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType colorRate;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType size;
	ExpressionAssignType sizeRange;
	EFXExpressionList expressions;
}TypeGpuRibbonFollowExpression_RE4<read="[TypeGpuRibbonFollowExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	if (Version < EfxVersion_RE4) { // end at: unkn1
		uint unkn1;
	}

	Color color0;
	Color color1;
	float unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn1
		uint re4_unkn1;
	}

	if (Version == EfxVersion_RE4) { // end at: re4_unkn2
		uint re4_unkn2;
	}

	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	uint unkn12;
	float unkn13;
	float unkn14;
	uint unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	float unkn21;
	float unkn22;
	float unkn23;
}TypeGpuRibbonLength_RE8<read="[TypeGpuRibbonLength]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(14);
	ExpressionAssignType color;
	ExpressionAssignType alpha;
	ExpressionAssignType alphaRate;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	EFXExpressionList expressions;
}TypeGpuRibbonLengthExpression_DD2<read="[TypeGpuRibbonLengthExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn1;
	Color color1;
	Color color2;
	float unkn1_3;
	float ukn2_0;
	float ukn2_1;
	float ukn2_2;
	float ukn2_3;
	float ukn2_4;
	float ukn2_5;
	float ukn2_6;
	float ukn2_7;
	uint ukn2_8;
	float ukn2_9;
	float ukn2_10;
	float ukn2_11;
	float ukn2_12;
	float ukn2_13;
	float ukn2_14;
	float ukn2_15;
	float ukn2_16;
	float ukn2_17;
	float ukn2_18;
	uint ukn2_19;
	uint ukn2_20;
	uint ukn2_21;
	float ukn2_22;
	float ukn2_23;
	float ukn2_24;
	uint ukn2_25;
	float ukn2_26;
	uint ukn2_27;
	if (Version >= EfxVersion_RE2) { // end at: ukn3_7
		uint ukn3_0;
		uint ukn3_1;
		float ukn3_2;
		Color color3;
		Color color4;
		Color color5;
		float ukn3_6;
		float ukn3_7;
	}

	if (Version >= EfxVersion_RE3) { // end at: ukn4_1
		float ukn4_0;
		float ukn4_1;
	}

	int len_boneName;
	wstring boneName;
}TypeStrainRibbonV1_RE7<read="[TypeStrainRibbonV1]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	Color color0;
	Color color1;
	float unkn1_3;
	uint unkn1_4;
	uint unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
	float unkn1_10;
	float unkn1_11;
	uint unkn1_12;
	float unkn1_13;
	float unkn1_14;
	float unkn1_15;
	float unkn1_16;
	float unkn1_17;
	if (Version >= EfxVersion_RERT) { // end at: sb_unkn0
		float sb_unkn0;
	}

	uint unkn1_18;
	uint unkn1_19;
	if (Version >= EfxVersion_RERT) { // end at: unkn1_20
		uint unkn1_20;
	}

	if (Version < EfxVersion_RERT) { // end at: unkn1_20_re8
		float unkn1_20_re8;
	}

	float unkn1_21;
	Color color2;
	Color color3;
	Color color4;
	float unkn1_25;
	float unkn1_26;
	float unkn1_27;
	float unkn1_28;
	float unkn1_29;
	uint unkn1_30;
	float unkn1_31;
	uint unkn1_32;
	uint unkn1_33;
	uint unkn1_34;
	float unkn1_35;
	float unkn1_36;
	float unkn1_37;
	float unkn1_38;
	float unkn1_39;
	float unkn1_40;
	uint unkn1_41;
	float unkn1_42;
	float unkn1_43;
	float unkn1_44;
	float unkn1_45;
	float unkn1_46;
	float unkn1_47;
	uint unkn1_48;
	uint unkn1_49;
	uint unkn1_50;
	uint unkn1_51;
	uint unkn1_52;
	float unkn1_53;
	float unkn1_54;
	float unkn1_55;
	uint unkn1_56;
	ubyte unkn2;
	float unkn3_0;
	float sb_unkn1;
	float unkn3_1;
	float unkn3_2;
	float unkn3_3;
	int len_boneName;
	wstring boneName;
}TypeStrainRibbonV2_RE8<read="[TypeStrainRibbonV2]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0_0;
	uint unkn0_1;
	uint unkn0_2;
	uint unkn0_3;
	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	int unkn2;
	float unkn3_0;
	float unkn3_1;
	float unkn3_2;
	float unkn3_3;
	float unkn3_4;
	uint unkn3_5;
	uint unkn4_0;
	float unkn4_1;
	float unkn4_2;
	Color color0;
	Color color1;
	Color color2;
	float unkn5_0;
	float unkn5_1;
	float unkn5_2;
	float unkn5_3;
	float unkn5_4;
	float unkn5_5;
	float unkn5_6;
	float unkn5_7;
	uint unkn5_8;
	float unkn5_9;
	float unkn5_10;
	float unkn5_11;
	float unkn5_12;
	float unkn5_13;
	float unkn5_14;
	float unkn5_15;
	float unkn5_16;
	float unkn5_17;
	float unkn5_18;
	float unkn5_19;
	float unkn5_20;
	float unkn5_21;
	float unkn5_22;
	float unkn5_23;
	uint unkn5_24;
	float unkn5_25;
	float unkn5_26;
	uint unkn5_27;
	float unkn5_28;
	float unkn5_29;
	float unkn5_30;
	float unkn5_31;
	int unkn6;
	float unkn7_0;
	float unkn7_1;
	float unkn7_2;
	float unkn7_3;
	float unkn7_4;
	float unkn7_5;
	int len_boneName;
	wstring boneName;
	int unkn8_0;
	uint unkn8_color1;
	uint unkn8_color2;
	float unkn8_3;
	float unkn8_4;
	int unkn8_5;
	float unkn8_6;
}TypeStrainRibbonV3_RE4<read="[TypeStrainRibbonV3]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(15);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType posX;
	ExpressionAssignType posY;
	ExpressionAssignType posZ;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	if (Version >= EfxVersion_RE8) { // end at: unkn14
		ExpressionAssignType unkn13;
		ExpressionAssignType unkn14;
	}

	ExpressionAssignType unkn15;
	EFXExpressionList expressions;
}TypeStrainRibbonExpression_RE2<read="[TypeStrainRibbonExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(24);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	ExpressionAssignType unkn8;
	ExpressionAssignType unkn9;
	ExpressionAssignType unkn10;
	ExpressionAssignType unkn12;
	ExpressionAssignType posX;
	ExpressionAssignType posY;
	ExpressionAssignType posZ;
	ExpressionAssignType terminalPosX;
	ExpressionAssignType terminalPosY;
	ExpressionAssignType terminalPosZ;
	ExpressionAssignType unkn19;
	ExpressionAssignType unkn20;
	ExpressionAssignType unkn21;
	ExpressionAssignType unkn22;
	ExpressionAssignType unkn23;
	ExpressionAssignType unkn24;
	EFXExpressionList expressions;
}TypeStrainRibbonExpressionV2_DD2<read="[TypeStrainRibbonExpressionV2]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	UndeterminedFieldType unkn1;
	uint unkn2;
	UndeterminedFieldType unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
	float unkn7;
	float unkn8;
	uint unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	uint unkn15;
	uint unkn16;
	float unkn17;
	float unkn18;
	Color color3;
	Color color4;
	Color color5;
	float unkn22;
	float unkn23;
	float unkn24;
	float unkn25;
	float unkn26;
	UndeterminedFieldType unkn27;
	UndeterminedFieldType unkn28;
	UndeterminedFieldType unkn29;
	UndeterminedFieldType unkn30;
	UndeterminedFieldType unkn31;
	float unkn32;
	UndeterminedFieldType unkn33;
	float unkn34;
	UndeterminedFieldType unkn35;
	float unkn36;
	UndeterminedFieldType unkn37;
	float unkn38;
	UndeterminedFieldType unkn39;
	float unkn40;
	float unkn41;
	float unkn42;
	float unkn43;
	float unkn44;
	float unkn45;
	uint unkn46;
	UndeterminedFieldType unkn47;
	uint unkn48;
	UndeterminedFieldType unkn49;
	UndeterminedFieldType unkn50;
	UndeterminedFieldType unkn51;
	UndeterminedFieldType unkn52;
	UndeterminedFieldType unkn53;
	uint unkn54;
	UndeterminedFieldType unkn55;
	UndeterminedFieldType unkn56;
	float unkn57;
	float unkn58;
	float unkn59;
	UndeterminedFieldType unkn60;
	int len_propName;
	wstring propName;
	UndeterminedFieldType unkn61;
	Color unkn62;
	Color unkn63;
	float unkn64;
	UndeterminedFieldType unkn65;
	UndeterminedFieldType unkn66;
	UndeterminedFieldType unkn67;
	if (Version >= EfxVersion_DD2) {
		EfxMaterialStructV2 material;
	} else {
		EfxMaterialStructV1 material;
	}
}TypeStrainRibbonMaterial_DD2<read="[TypeStrainRibbonMaterial]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(1);
	uint unkn1;
	EfxMaterialClipData clipData;
}TypeStrainRibbonMaterialClip_DD2<read="[TypeStrainRibbonMaterialClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(22);
	ExpressionAssignType color;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType posX;
	ExpressionAssignType posY;
	ExpressionAssignType posZ;
	ExpressionAssignType terminalPosX;
	ExpressionAssignType terminalPosY;
	ExpressionAssignType terminalPosZ;
	ExpressionAssignType unkn11;
	ExpressionAssignType unkn12;
	ExpressionAssignType unkn13;
	ExpressionAssignType unkn14;
	ExpressionAssignType color2;
	ExpressionAssignType unkn16;
	ExpressionAssignType color3;
	ExpressionAssignType unkn18;
	ExpressionAssignType color4;
	ExpressionAssignType unkn20;
	EFXExpressionList expressions;
	ExpressionAssignType unkn21;
	int materialExpressionCount;
	if (Version >= EfxVersion_DD2) { // end at: materialExpressions
		EFXMaterialExpressionList materialExpressions;
	}

}TypeStrainRibbonMaterialExpression_DD2<read="[TypeStrainRibbonMaterialExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn0;
	uint hash1;
	uint hash2;
	UndeterminedFieldType ukn3;
	int ukn4;
}UnknownRERT_233_RERT<read="[UnknownRERT_233]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	uint unkn1;
	uint unkn2;
	uint unkn3;
	float unkn4;
	float unkn5;
	float unkn6;
	float unkn7;
	ubyte unkn8;
	ubyte unkn9;
	ubyte unkn10;
	float unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	float unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	ubyte unkn20;
}UnknownRE4_197_RE4<read="[UnknownRE4_197]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

}UnknownDD2_250_DD2<read="[UnknownDD2_250]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn2
		float re4_unkn0;
		float re4_unkn1;
		float re4_unkn2;
	}

	float unkn2_0;
	float unkn2_1;
	uint unkn2_2;
	float unkn2_3;
	float unkn2_4;
	if (Version >= EfxVersion_RE4) { // end at: re4_unkn2_1
		UndeterminedFieldType re4_unkn2_0;
		UndeterminedFieldType re4_unkn2_1;
	}

}Velocity2D_DMC5<read="[Velocity2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(13);
	ExpressionAssignType speed;
	ExpressionAssignType speedRand;
	ExpressionAssignType unkn3;
	ExpressionAssignType gravity;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType angle;
	ExpressionAssignType angleRand;
	if (Version >= EfxVersion_RE4) { // end at: unkn13
		ExpressionAssignType unkn9;
		ExpressionAssignType unkn10;
		ExpressionAssignType unkn11;
		ExpressionAssignType unkn12;
		ExpressionAssignType unkn13;
	}

	EFXExpressionList expressions;
}Velocity2DExpression_RERT<read="[Velocity2DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version >= EfxVersion_RE2) { // end at: unkn1
		uint unkn1;
	}

	float unkn2_0;
	float unkn2_1;
	float unkn2_2;
	float unkn2_3;
	float unkn2_4;
	float unkn2_5;
	float unkn2_6;
	float unkn2_7;
	float unkn2_8;
	float unkn2_9;
	if (Version >= EfxVersion_RE4) { // end at: unkn2_11
		uint unkn2_10;
		uint unkn2_11;
	}

	float unkn2_12;
	float unkn2_13;
	float unkn2_14;
	float unkn2_15;
	float re4_unkn0;
	float re4_unkn1;
	uint unkn3;
	float unkn4_0;
	if (Version >= EfxVersion_RE2) { // end at: unkn4_1
		float unkn4_1;
	}

	if (Version >= EfxVersion_RE4) { // end at: re4_unkn3
		uint re4_unkn2;
		uint re4_unkn3;
	}

	float unkn4_2;
	if (Version >= EfxVersion_RE2) { // end at: unkn4_5
		float unkn4_3;
		float unkn4_4;
		float unkn4_5;
	}

	if (Version >= EfxVersion_RE8) { // end at: sb_unkn1
		float sb_unkn0;
		float sb_unkn1;
	}

}Velocity3D_RE2<read="[Velocity3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn2;
}Velocity3DDelayFrame_RE4<read="[Velocity3DDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	if (Version >= EfxVersion_RE8) { // end at: range3
		uint rert_unkn0;
		uint rert_unkn1;
		Vec2 range1;
		Vec2 range2;
		Vec2 range3;
	}

	BitSet expressionBits(19);
	ExpressionAssignType speed;
	ExpressionAssignType speedRand;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType velocityX;
	ExpressionAssignType velocityXRandom;
	ExpressionAssignType velocityY;
	ExpressionAssignType velocityYRandom;
	ExpressionAssignType velocityZ;
	ExpressionAssignType velocityZRandom;
	if (Version > EfxVersion_RERT) { // end at: unkn14
		ExpressionAssignType unkn13;
		ExpressionAssignType unkn14;
	}

	if (Version >= EfxVersion_RE4) { // end at: unkn19
		ExpressionAssignType unkn15;
		ExpressionAssignType unkn16;
		ExpressionAssignType unkn17;
		ExpressionAssignType unkn18;
		ExpressionAssignType unkn19;
	}

	EFXExpressionList expressions;
}Velocity3DExpression_RE3<read="[Velocity3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn0;
	float unkn1;
	float unkn2;
	float unkn3;
	uint unkn4;
	float unkn5;
	uint unkn6;
	float unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	float unkn11;
	float radians12;
	float radians13;
	float radians14;
}AngularVelocity2D_DMC5<read="[AngularVelocity2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1_0;
	uint unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;
	float unkn1_10;
	float unkn1_11;
	float unkn1_12;
	float unkn1_13;
	float unkn1_14;
	float unkn1_15;
	float unkn1_16;
	float unkn1_17;
	float unkn1_18;
	float unkn1_19;
}AngularVelocity3D_DMC5<read="[AngularVelocity3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint frameDelay;
	uint unkn1;
}AngularVelocity3DDelayFrame_RERT<read="[AngularVelocity3DDelayFrame]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float ukn0;
	float ukn1;
	float ukn2;
}PtVelocity2D_RERT<read="[PtVelocity2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint ukn0;
	float ukn1;
	float ukn2;
	uint ukn3;
}PtVelocity2DClip_RERT<read="[PtVelocity2DClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
}PtVelocity3D_RE7<read="[PtVelocity3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet clipBits(4);
	uint unkn1;
	EfxClipData clipData;
}PtVelocity3DClip_DMC5<read="[PtVelocity3DClip]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	UndeterminedFieldType unkn1;
	float unkn2;
	float unkn3;
	UndeterminedFieldType unkn4;
	UndeterminedFieldType unkn5;
	UndeterminedFieldType unkn6;
	float unkn7;
	float unkn8;
}PtAngularVelocity3D_RE8<read="[PtAngularVelocity3D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	BitSet expressionBits(7);
	ExpressionAssignType unkn1;
	ExpressionAssignType unkn2;
	ExpressionAssignType unkn3;
	ExpressionAssignType unkn4;
	ExpressionAssignType unkn5;
	ExpressionAssignType unkn6;
	ExpressionAssignType unkn7;
	EFXExpressionList expressions;
}PtAngularVelocity3DExpression_DD2<read="[PtAngularVelocity3DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint null1;
	float unkn2;
	float unkn3;
	float unkn4;
	float null5;
	float unkn6;
}PtAngularVelocity2D_DD2<read="[PtAngularVelocity2D]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	uint unkn2;
	uint unkn3;
	uint unkn4;
	uint unkn5;
	uint unkn6;
	uint unkn7;
	EFXExpressionList expressions;
}PtAngularVelocity2DExpression_DD2<read="[PtAngularVelocity2DExpression]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	float unkn1;
	if (Version >= EfxVersion_MHWilds) { // end at: unkn3
		float unkn2;
		float unkn3;
	}

	float unkn4;
	float unkn5;
	float unkn6;
	uint unkn7;
	uint unkn8;
	short unkn9;
}PtVortexelWind_RE4<read="[PtVortexelWind]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	UndeterminedFieldType unkn1;
	uint unkn2;
	UndeterminedFieldType unkn3;
	uint unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
	UndeterminedFieldType unkn7;
	UndeterminedFieldType unkn8;
	UndeterminedFieldType unkn9;
	float unkn10;
	ByteSet unkn11;
	float unkn12;
	float unkn13;
	float unkn14;
	float unkn15;
	float unkn16;
	float unkn17;
	float unkn18;
	float unkn19;
	float unkn20;
	short unknShort;
}VortexelWindEmitter_MHWilds<read="[VortexelWindEmitter]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	uint unkn2;
	float unkn3;
	uint unkn4;
	float unkn5;
	float unkn6;
	UndeterminedFieldType unkn7;
	float unkn8;
	UndeterminedFieldType unkn9;
	float unkn10;
	float unkn11;
	float unkn12;
	UndeterminedFieldType unkn13;
	float unkn14;
	UndeterminedFieldType unkn15;
	float unkn16;
	UndeterminedFieldType unkn17;
	float unkn18;
	UndeterminedFieldType unkn19;
	float unkn20;
	UndeterminedFieldType unkn21;
	float unkn22;
	UndeterminedFieldType unkn23;
	UndeterminedFieldType unkn24;
	float unkn25;
	UndeterminedFieldType unkn26;
}PtVortexelPhysics_MHWilds<read="[PtVortexelPhysics]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	float unkn2;
	UndeterminedFieldType unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
}PtVortexelPhysicsSimple_MHWilds<read="[PtVortexelPhysicsSimple]">;

typedef struct {    local int currentAttributeIndex = -1;
    uint itemType;
    if (Version >= EfxVersion_MHWilds) int itemSize;
    uint unknSeqNum <read=Str("%d = X: %d, Y: %d, Z: %d", this, this & 0xff, (this & 0xff00)>>8, (this & 0xff0000)>>16)>;

	uint unkn1;
	float unkn2;
	float unkn3;
	float unkn4;
	UndeterminedFieldType unkn5;
	float unkn6;
}PtVortexelSnap_MHWilds<read="[PtVortexelSnap]">;

void GetEFXItemStruct(string itemType)
{
    switch(itemType)
    {
        case "Spawn": { Spawn_DMC5 attribute; } break;
        case "SpawnExpression": { SpawnExpression_RE3 attribute; } break;
        case "ParentOptions": { ParentOptions_RE7 attribute; } break;
        case "ParentOptionsExpression": { ParentOptionsExpression_DD2 attribute; } break;
        case "Life": { Life_RE7 attribute; } break;
        case "LifeExpression": { LifeExpression_RE7 attribute; } break;
        case "TextureUnit": { TextureUnit_DMC5 attribute; } break;
        case "TextureUnitExpression": { TextureUnitExpression_DD2 attribute; } break;
        case "TextureFilter": { TextureFilter_RE4 attribute; } break;
        case "UVScroll": { UVScroll_RE4 attribute; } break;
        case "UVSequence": { UVSequence_DMC5 attribute; } break;
        case "UVSequenceModifier": { UVSequenceModifier_RE4 attribute; } break;
        case "UVSequenceExpression": { UVSequenceExpression_DMC5 attribute; } break;
        case "AlphaCorrection": { AlphaCorrection_RE7 attribute; } break;
        case "ShaderSettings": { ShaderSettings_RE7 attribute; } break;
        case "ShaderSettingsExpression": { ShaderSettingsExpression_DMC5 attribute; } break;
        case "PlayEfx": { PlayEfx_DMC5 attribute; } break;
        case "PlayEmitter": { PlayEmitter_DMC5 attribute; } break;
        case "RenderTarget": { RenderTarget_DMC5 attribute; } break;
        case "EmitterColor": { EmitterColor_RE4 attribute; } break;
        case "EmitterColorClip": { EmitterColorClip_RE4 attribute; } break;
        case "EmitterPriority": { EmitterPriority_DMC5 attribute; } break;
        case "EmitterShape2D": { EmitterShape2D_DMC5 attribute; } break;
        case "EmitterShape2DExpression": { EmitterShape2DExpression_RE4 attribute; } break;
        case "EmitterShape3D": { EmitterShape3D_RERT attribute; } break;
        case "EmitterShape3DExpression": { EmitterShape3DExpression_RE7 attribute; } break;
        case "ScreenSpaceEmitter": { ScreenSpaceEmitter_RE8 attribute; } break;
        case "MeshEmitter": { MeshEmitter_DMC5 attribute; } break;
        case "MeshEmitterClip": { MeshEmitterClip_DMC5 attribute; } break;
        case "MeshEmitterExpression": { MeshEmitterExpression_DMC5 attribute; } break;
        case "FadeByAngle": { FadeByAngle_DMC5 attribute; } break;
        case "FadeByAngleExpression": { FadeByAngleExpression_DMC5 attribute; } break;
        case "FadeByDepth": { FadeByDepth_DMC5 attribute; } break;
        case "FadeByDepthExpression": { FadeByDepthExpression_DMC5 attribute; } break;
        case "FadeByEmitterAngle": { FadeByEmitterAngle_DMC5 attribute; } break;
        case "FadeByOcclusion": { FadeByOcclusion_DMC5 attribute; } break;
        case "FadeByRootCulling": { FadeByRootCulling_DD2 attribute; } break;
        case "VectorFieldParameter": { VectorFieldParameter_RE2 attribute; } break;
        case "VectorFieldParameterClip": { VectorFieldParameterClip_DMC5 attribute; } break;
        case "VectorFieldParameterExpression": { VectorFieldParameterExpression_DMC5 attribute; } break;
        case "GlobalVectorField": { GlobalVectorField_RE8 attribute; } break;
        case "DirectionalFieldParameter": { DirectionalFieldParameter_RE8 attribute; } break;
        case "FluidEmitter2D": { FluidEmitter2D_RE7 attribute; } break;
        case "FluidEmitter2DExpression": { FluidEmitter2DExpression_DD2 attribute; } break;
        case "FluidSimulator2D": { FluidSimulator2D_RE2 attribute; } break;
        case "DepthOperator": { DepthOperator_RE2 attribute; } break;
        case "Distortion": { Distortion_RE7 attribute; } break;
        case "DistortionExpression": { DistortionExpression_DD2 attribute; } break;
        case "ProceduralDistortion": { ProceduralDistortion_RE4 attribute; } break;
        case "ProceduralDistortionDelayFrame": { ProceduralDistortionDelayFrame_RE4 attribute; } break;
        case "ProceduralDistortionClip": { ProceduralDistortionClip_RE4 attribute; } break;
        case "ProceduralDistortionExpression": { ProceduralDistortionExpression_DD2 attribute; } break;
        case "FakeDoF": { FakeDoF_DMC5 attribute; } break;
        case "WindInfluence3D": { WindInfluence3D_RE8 attribute; } break;
        case "WindInfluence3DDelayFrame": { WindInfluence3DDelayFrame_DD2 attribute; } break;
        case "DepthOcclusion": { DepthOcclusion_RE8 attribute; } break;
        case "PlaneCollider": { PlaneCollider_RE8 attribute; } break;
        case "FixRandomGenerator": { FixRandomGenerator_DMC5 attribute; } break;
        case "EffectShader": { EffectOptimizeShader_DD2 attribute; } break;
        case "Attractor": { Attractor_RERT attribute; } break;
        case "AttractorClip": { AttractorClip_RE8 attribute; } break;
        case "AttractorExpression": { AttractorExpression_RE4 attribute; } break;
        case "Blink": { Blink_RE4 attribute; } break;
        case "ColorGrading": { ColorGrading_RE4 attribute; } break;
        case "ContrastHighlighter": { ContrastHighlighter_RE4 attribute; } break;
        case "DrawOverlay": { DrawOverlay_DMC5 attribute; } break;
        case "EmitMask": { EmitMask_RE4 attribute; } break;
        case "IgnorePlayerColor": { IgnorePlayerColor_RE2 attribute; } break;
        case "LuminanceBleed": { LuminanceBleed_RERT attribute; } break;
        case "Noise": { Noise_RE4 attribute; } break;
        case "NoiseExpression": { NoiseExpression_RE4 attribute; } break;
        case "StretchBlur": { StretchBlur_RE4 attribute; } break;
        case "TexelChannelOperator": { TexelChannelOperator_RE4 attribute; } break;
        case "VanishArea3D": { VanishArea3D_RE4 attribute; } break;
        case "VanishArea3DExpression": { VanishArea3DExpression_RE4 attribute; } break;
        case "TexelChannelOperatorClip": { TexelChannelOperatorClip_RE4 attribute; } break;
        case "RgbCommon": { RgbCommon_RE4 attribute; } break;
        case "RgbCommonExpression": { RgbCommonExpression_DD2 attribute; } break;
        case "RgbWater": { RgbWater_DD2 attribute; } break;
        case "RgbWaterExpression": { RgbWaterExpression_MHWilds attribute; } break;
        case "FlowMap": { FlowMap_MHWilds attribute; } break;
        case "AssignCSV": { AssignCSV_RE4 attribute; } break;
        case "DestinationCSV": { DestinationCSV_DD2 attribute; } break;
        case "TerrainSnap": { TerrainSnap_DD2 attribute; } break;
        case "Trigger": { Trigger_DD2 attribute; } break;
        case "PtBehavior": { PtBehavior_RE4 attribute; } break;
        case "PtColliderAction": { PtColliderAction_DMC5 attribute; } break;
        case "PtCollision": { PtCollision_RE7 attribute; } break;
        case "PtProjection": { PtProjection_MHWilds attribute; } break;
        case "PtColor": { PtColor_RE7 attribute; } break;
        case "PtColorClip": { PtColorClip_DMC5 attribute; } break;
        case "PtLife": { PtLife_RE7 attribute; } break;
        case "PtSort": { PtSort_RE8 attribute; } break;
        case "PtUvSequence": { PtUvSequence_DMC5 attribute; } break;
        case "PtUvSequenceClip": { PtUvSequenceClip_DMC5 attribute; } break;
        case "PtFreezer": { PtFreezer_DD2 attribute; } break;
        case "PtPathTranslate": { PtPathTranslate_RE4 attribute; } break;
        case "Transform2D": { Transform2D_DMC5 attribute; } break;
        case "Transform2DClip": { Transform2DClip_RERT attribute; } break;
        case "Transform2DExpression": { Transform2DExpression_RE2 attribute; } break;
        case "Transform2DModifierDelayFrame": { Transform2DModifierDelayFrame_RE4 attribute; } break;
        case "Transform3D": { Transform3D_DMC5 attribute; } break;
        case "Transform3DExpression": { Transform3DExpression_DMC5 attribute; } break;
        case "Transform3DClip": { Transform3DClip_DMC5 attribute; } break;
        case "Transform3DModifierDelayFrame": { Transform3DModifierDelayFrame_RE4 attribute; } break;
        case "Transform3DModifier": { Transform3DModifier_RE2 attribute; } break;
        case "PtTransform2D": { PtTransform2D_DMC5 attribute; } break;
        case "PtTransform2DClip": { PtTransform2DClip_RE8 attribute; } break;
        case "PtTransform3D": { PtTransform3D_RE7 attribute; } break;
        case "PtTransform3DClip": { PtTransform3DClip_RE7 attribute; } break;
        case "PtTransform3DExpression": { PtTransform3DExpression_DD2 attribute; } break;
        case "RotateAnim": { RotateAnim_DMC5 attribute; } break;
        case "RotateAnimDelayFrame": { RotateAnimDelayFrame_RE4 attribute; } break;
        case "RotateAnimExpression": { RotateAnimExpression_RE7 attribute; } break;
        case "ScaleAnim": { ScaleAnim_DMC5 attribute; } break;
        case "ScaleAnimDelayFrame": { ScaleAnimDelayFrame_RE4 attribute; } break;
        case "ScaleAnimExpression": { ScaleAnimExpression_DMC5 attribute; } break;
        case "ScaleByDepth": { ScaleByDepth_RE4 attribute; } break;
        case "TypeBillboard2D": { TypeBillboard2D_RE7 attribute; } break;
        case "TypeBillboard2DExpression": { TypeBillboard2DExpression_RE7 attribute; } break;
        case "TypeBillboard3D": { TypeBillboard3D_DMC5 attribute; } break;
        case "TypeBillboard3DExpression": { TypeBillboard3DExpression_DMC5 attribute; } break;
        case "TypeBillboard3DMaterial": { TypeBillboard3DMaterial_DD2 attribute; } break;
        case "TypeBillboard3DMaterialClip": { TypeBillboard3DMaterialClip_DD2 attribute; } break;
        case "TypeBillboard3DMaterialExpression": { TypeBillboard3DMaterialExpression_DD2 attribute; } break;
        case "TypeNodeBillboard": { TypeNodeBillboard_RE7 attribute; } break;
        case "TypeNodeBillboardExpression": { TypeNodeBillboardExpression_DMC5 attribute; } break;
        case "TypeGpuBillboard": { TypeGpuBillboard_RE2 attribute; } break;
        case "TypeGpuBillboardExpression": { TypeGpuBillboardExpression_DMC5 attribute; } break;
        case "TypeGpuBillboardClip": { TypeGpuBillboardClip_RE4 attribute; } break;
        case "TypeNoDraw": { TypeNoDraw_RE7 attribute; } break;
        case "TypeNoDrawExpression": { TypeNoDrawExpression_RE3 attribute; } break;
        case "UnitCulling": { UnitCulling_DMC5 attribute; } break;
        case "UnitCullingExpression": { UnitCullingExpression_DD2 attribute; } break;
        case "TypeLightning3D": {
			if (Version == EfxVersion_RE7 || Version == EfxVersion_RE2 || Version == EfxVersion_DMC5) TypeLightning3DV1_RE7 attribute;
			else if (Version == EfxVersion_MHRiseSB || Version == EfxVersion_DD2) TypeLightning3D_MHRiseSB attribute;
			else TypeLightning3D_MHRiseSB attribute;
		} break;
        case "TypeLightning3DExpression": { TypeLightning3DExpression_DD2 attribute; } break;
        case "TypeLightning3DMaterial": { TypeLightning3DMaterial_DD2 attribute; } break;
        case "TypeLightning3DMaterialClip": { TypeLightning3DMaterialClip_DD2 attribute; } break;
        case "TypeLightning3DMaterialExpression": { TypeLightning3DMaterialExpression_DD2 attribute; } break;
        case "TypeGpuLightning3D": { TypeGpuLightning3D_DD2 attribute; } break;
        case "TypeLightningExpensive": { TypeLightningExpensive_MHWilds attribute; } break;
        case "PtLightningBranchAction": { PtLightningBranchAction_MHWilds attribute; } break;
        case "TypeMesh": {
			if (Version == EfxVersion_RE7 || Version == EfxVersion_RE2 || Version == EfxVersion_DMC5 || Version == EfxVersion_RE3) TypeMesh_RE7 attribute;
			else if (Version == EfxVersion_RE8 || Version == EfxVersion_RERT || Version == EfxVersion_RE4 || Version == EfxVersion_DD2 || Version == EfxVersion_MHWilds) TypeMeshV2_RE8 attribute;
			else TypeMeshV2_RE8 attribute;
		} break;
        case "TypeMeshClip": { TypeMeshClip_RE3 attribute; } break;
        case "TypeMeshExpression": { TypeMeshExpression_RE7 attribute; } break;
        case "TypeGpuMesh": { TypeGpuMesh_RE8 attribute; } break;
        case "TypeGpuMeshClip": { TypeGpuMeshClip_DD2 attribute; } break;
        case "TypeGpuMeshExpression": { TypeGpuMeshExpression_RE8 attribute; } break;
        case "TypeGpuMeshTrail": {
			if (Version == EfxVersion_RE8) TypeGpuMeshTrail_RE8 attribute;
			else if (Version == EfxVersion_DD2) TypeGpuMeshTrailV2_DD2 attribute;
			else TypeGpuMeshTrailV2_DD2 attribute;
		} break;
        case "TypeGpuMeshTrailClip": { TypeGpuMeshTrailClip_DD2 attribute; } break;
        case "TypeGpuMeshTrailExpression": { TypeGpuMeshTrailExpression_DD2 attribute; } break;
        case "TypePolygon": { TypePolygon_RE7 attribute; } break;
        case "TypePolygonClip": { TypePolygonClip_DMC5 attribute; } break;
        case "TypePolygonExpression": { TypePolygonExpression_RE7 attribute; } break;
        case "TypePolygonMaterial": { TypePolygonMaterial_RE8 attribute; } break;
        case "TypePolygonTrail": { TypePolygonTrail_RE2 attribute; } break;
        case "TypePolygonTrailMaterial": { TypePolygonTrailMaterial_DD2 attribute; } break;
        case "TypePolygonTrailMaterialExpression": { TypePolygonTrailMaterialExpression_DD2 attribute; } break;
        case "TypeGpuPolygon": { TypeGpuPolygon_RE3 attribute; } break;
        case "TypeGpuPolygonExpression": { TypeGpuPolygonExpression_DD2 attribute; } break;
        case "TypeRibbonLength": { TypeRibbonLength_RE7 attribute; } break;
        case "TypeRibbonLengthExpression": { TypeRibbonLengthExpression_RE7 attribute; } break;
        case "TypeRibbonLengthMaterial": { TypeRibbonLengthMaterial_RE8 attribute; } break;
        case "TypeRibbonLengthMaterialExpression": { TypeRibbonLengthMaterialExpression_DD2 attribute; } break;
        case "TypeRibbonChain": {
			if (Version == EfxVersion_RE7) TypeRibbonChainV1_RE7 attribute;
			else if (Version == EfxVersion_RE2 || Version == EfxVersion_DMC5 || Version == EfxVersion_RE4 || Version == EfxVersion_DD2) TypeRibbonChain_RE2 attribute;
			else TypeRibbonChain_RE2 attribute;
		} break;
        case "TypeRibbonChainExpression": { TypeRibbonChainExpression_RE2 attribute; } break;
        case "TypeRibbonChainMaterial": { TypeRibbonChainMaterial_DD2 attribute; } break;
        case "TypeRibbonChainMaterialClip": { TypeRibbonChainMaterialClip_DD2 attribute; } break;
        case "TypeRibbonChainMaterialExpression": { TypeRibbonChainMaterialExpression_DD2 attribute; } break;
        case "TypeRibbonFixEnd": { TypeRibbonFixEnd_RE4 attribute; } break;
        case "TypeRibbonFixEndExpression": { TypeRibbonFixEndExpression_RE8 attribute; } break;
        case "TypeRibbonFixEndMaterial": { TypeRibbonFixEndMaterial_DD2 attribute; } break;
        case "TypeRibbonFixEndMaterialClip": { TypeRibbonFixEndMaterialClip_DD2 attribute; } break;
        case "TypeRibbonFixEndMaterialExpression": { TypeRibbonFixEndMaterialExpression_DD2 attribute; } break;
        case "TypeRibbonFollow": { TypeRibbonFollow_RE7 attribute; } break;
        case "TypeRibbonFollowExpression": { TypeRibbonFollowExpression_DMC5 attribute; } break;
        case "TypeRibbonFollowMaterial": { TypeRibbonFollowMaterial_DD2 attribute; } break;
        case "TypeRibbonFollowMaterialClip": { TypeRibbonFollowMaterialClip_DD2 attribute; } break;
        case "TypeRibbonFollowMaterialExpression": { TypeRibbonFollowMaterialExpression_DD2 attribute; } break;
        case "TypeRibbonLightweight": { TypeRibbonLightweight_DMC5 attribute; } break;
        case "TypeRibbonParticle": { TypeRibbonParticle_DD2 attribute; } break;
        case "TypeRibbonTrail": { TypeRibbonTrail_RE7 attribute; } break;
        case "TypeRibbonParticleExpression": { TypeRibbonParticleExpression_DD2 attribute; } break;
        case "TypeGpuRibbonFollow": { TypeGpuRibbonFollow_RE2 attribute; } break;
        case "TypeGpuRibbonFollowExpression": { TypeGpuRibbonFollowExpression_RE4 attribute; } break;
        case "TypeGpuRibbonLength": { TypeGpuRibbonLength_RE8 attribute; } break;
        case "TypeGpuRibbonLengthExpression": { TypeGpuRibbonLengthExpression_DD2 attribute; } break;
        case "TypeStrainRibbon": {
			if (Version == EfxVersion_RE7 || Version == EfxVersion_RE2 || Version == EfxVersion_DMC5 || Version == EfxVersion_RE3) TypeStrainRibbonV1_RE7 attribute;
			else if (Version == EfxVersion_RE8 || Version == EfxVersion_RERT) TypeStrainRibbonV2_RE8 attribute;
			else if (Version == EfxVersion_RE4) TypeStrainRibbonV3_RE4 attribute;
			else TypeStrainRibbonV3_RE4 attribute;
		} break;
        case "TypeStrainRibbonExpression": {
			if (Version == EfxVersion_RE2 || Version == EfxVersion_DMC5 || Version == EfxVersion_RE8 || Version == EfxVersion_RERT) TypeStrainRibbonExpression_RE2 attribute;
			else if (Version == EfxVersion_DD2) TypeStrainRibbonExpressionV2_DD2 attribute;
			else TypeStrainRibbonExpressionV2_DD2 attribute;
		} break;
        case "TypeStrainRibbonMaterial": { TypeStrainRibbonMaterial_DD2 attribute; } break;
        case "TypeStrainRibbonMaterialClip": { TypeStrainRibbonMaterialClip_DD2 attribute; } break;
        case "TypeStrainRibbonMaterialExpression": { TypeStrainRibbonMaterialExpression_DD2 attribute; } break;
        case "UnknownRERT_233": { UnknownRERT_233_RERT attribute; } break;
        case "UnknownRE4_197": { UnknownRE4_197_RE4 attribute; } break;
        case "UnknownDD2_250": { UnknownDD2_250_DD2 attribute; } break;
        case "Velocity2D": { Velocity2D_DMC5 attribute; } break;
        case "Velocity2DExpression": { Velocity2DExpression_RERT attribute; } break;
        case "Velocity3D": { Velocity3D_RE2 attribute; } break;
        case "Velocity3DDelayFrame": { Velocity3DDelayFrame_RE4 attribute; } break;
        case "Velocity3DExpression": { Velocity3DExpression_RE3 attribute; } break;
        case "AngularVelocity2D": { AngularVelocity2D_DMC5 attribute; } break;
        case "AngularVelocity3D": { AngularVelocity3D_DMC5 attribute; } break;
        case "AngularVelocity3DDelayFrame": { AngularVelocity3DDelayFrame_RERT attribute; } break;
        case "PtVelocity2D": { PtVelocity2D_RERT attribute; } break;
        case "PtVelocity2DClip": { PtVelocity2DClip_RERT attribute; } break;
        case "PtVelocity3D": { PtVelocity3D_RE7 attribute; } break;
        case "PtVelocity3DClip": { PtVelocity3DClip_DMC5 attribute; } break;
        case "PtAngularVelocity3D": { PtAngularVelocity3D_RE8 attribute; } break;
        case "PtAngularVelocity3DExpression": { PtAngularVelocity3DExpression_DD2 attribute; } break;
        case "PtAngularVelocity2D": { PtAngularVelocity2D_DD2 attribute; } break;
        case "PtAngularVelocity2DExpression": { PtAngularVelocity2DExpression_DD2 attribute; } break;
        case "PtVortexelWind": { PtVortexelWind_RE4 attribute; } break;
        case "VortexelWindEmitter": { VortexelWindEmitter_MHWilds attribute; } break;
        case "PtVortexelPhysics": { PtVortexelPhysics_MHWilds attribute; } break;
        case "PtVortexelPhysicsSimple": { PtVortexelPhysicsSimple_MHWilds attribute; } break;
        case "PtVortexelSnap": { PtVortexelSnap_MHWilds attribute; } break;
        default:
            {
                local uint errorItemType = ReadUInt();
                local uint errorUnknSeqNum = ReadUInt(FTell()+4);
                Printf("Struct ID does not match any known structs, template stopping.\nItem Type:%i\nunknSeqNum:%i\nPosition:%i\n",errorItemType,errorUnknSeqNum,FTell());
                Warning("Struct Error, template stopping. Unknown Item Type: %i",errorItemType);
                writeErrorToFile(999);
            };
    }
}
